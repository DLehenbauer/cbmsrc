.PAG 'FETCH'
;**********************************
;
;   F E T C H
;
; READ DATA FROM THE CURRENTLY ACTIVE
; FILE AND CHANEL.  CONVERT THE
; DATA TO THE VARIABLE TYPE ONLY
; WHEN THEY DIFFER.
;
;*********************************
FETCH	JSR ERRDIR      ;CHECK IF IN DIRECT MODE
;GENERATE ERROR IF SO.
	LDA #'#         ;ARGUMENT TO SYNCHR
	JSR SYNCHR      ;CHECK FOR "#"
;IF ITS OK POINT TO
;LOGICAL UNIT EXPRESSION
	JSR GETBYT      ;EVALUATE L.U. EXPRS
;IF 0<LU<255 IS FALSE
;GENERATE ERROR.
	JSR OLDCLR      ;IGNORE PREVIOUS DISK ERRORS
	JSR CHKIN       ;ELSE CHECK FOR FILE OPEN
;GENERATE ERROR IF NOT
;ESTABLISH CHANNEL I/O
;OTHERWISE.
	STX CHANNL      ;MAKE CHANNEL'S LOGICAL UNIT GLOBAL
;*********************************
;
; BEGIN PROCESSING OF THE USER'S
;      VARIBALE LIST
;
;*********************************
FETLUP	JSR CHKCOM      ;NEXT CHAR SHOULD BE
;A COMMA GENERATE ERROR
;IF NOT.
;
;
	JSR PTRGET      ;GET THE FIRST VARIABLE
	STX VALTYP      ;SAVE VARIABLE TYPE HERE
	STA FORPNT      ;SAVE POINTER TO VARIABLE
	STY FORPNT+1    ;SAVE HIGH ORDER BYTEALSO
	JSR ACPTR       ;GO GET THE DATA TYPE BYTE
	BMI STRG        ;BRANCH IF DATA TYPE IS STRING
	LDY VALTYP      ;ELSE CHECK VARIABLE TYPE
	BMI STRG        ;BRANCH IF VALTYP IS STRG
	CMP #3          ;CHECK FOR VALID DATA TYPE
	BCC TYPEOK      ;BRANCH IF TYPE IS VALID
	JMP RDERR       ;ELSE GENERATE READ ERROR
TYPEOK	TAY             ;USE DATA TYPE FOR TABLE INDEX
	LDX TYPLEN,Y    ;GET #OF BYTES FOR
;FOR THIS TYPE FROM TABLE.
	JSR FILLIT      ;READ IN DATA -CONVRT
;DATA IF NECESSARY
	BEQ FETNXT      ;BRANCH ALWAYS NXT VAR
;
STRG	CMP VALTYP      ;CHECK FOR TYPE MISMATCH
	BEQ IMOK        ;BRANCH IF BOTH ARE STRINGS
	LDX #ERRTM      ;ELSE TYPE ERROR
	JMP ERROR       ;GO PRINT ERROR MSG AND GOTO READY
;
;
;          PERFORM STRING REPLACEMENT
;
IMOK	STA FORTYP      ;JUST BECAUSE
	JSR ACPTR       ;GET STRING LENGTH FROM DISK
	JSR STRSPA      ;ALLOCATE TEMPORARY STRING
;DESCRIPTOR AND STRING SPACE
;
;         GETSPT NEEDS TO KNOW
;   WHICH STRING TO FLAG AS GARBAGE AND WHICH TO
;        ADD TO THE SYMBOL TABLE
;
	LDA #<DSCTMP    ;GET ADDR OF DESCRIPTOR TO ADD
	STA FACMO       ;POINT FACMO AT DESCRIPTOR
	LDA #>DSCTMP    ;GET THE HIGH ORDER BYTE
	STA FACMO+1     ;PUT IT HERE FOR GETSPT
	JSR GETSPT      ;CLEAN UP TEMPORARY STUFF
;DELETE OLD STRING ENTER NEW ONE
	LDX DSCTMP      ;GET STRING LENGTH
	BEQ FETNXT      ;IF LEN=0 DO NEXT VARIABLE
;
; SET UP POINTER,LENGTH AND VARIABLE TYPE FOR TRANSFFER
;            FROM DISK TO STRING SPACE
;
	LDA DSCTMP+1    ;GET LO ORDER BYTE ADR OF STRING
	STA INDEX       ;SUBROUTINE XFR  WILL FIND IT HERE
	LDA DSCTMP+2    ;GET HI ORDER BYTE ADR
	STA INDEX+1     ;PUT IT HERE FOR XFR
	LDX DSCTMP      ;GET STRING'S LENGTH
	LDA #$FF        ;AND VARIABLE TYPE
	JSR XFR         ;READ STRING FROM DISK
;AND STORE IN STRING SPACE
;
;  CONTINUE TO PROCESS THE USER'S VARIABLE LIST
;
FETNXT	JSR CHRGOT      ;CHECK FOR A TERMINATOR
	BNE FETLUP      ;BRANCH IF NOT A TERMINATOR
;
;--------------< RETURN >----------
FETRTS	JMP IODONE      ;IODONE RETURNS FOR ME
.PAG FILLIT
;*********************************
;
; F I L L I T
;
; READ DATA FROM CURRENT CHANNEL.
; IF TYPES DIFFER PERFORM DATA
;          CONVERSION
;
;----EXPECTED INPUTS
;
; VALTYP   CONTAINS TYPE TO CONVERT
;          TO IF CONVERSION NEEDED
;
; VARPNT   POINTS TO USER'S
;          VARIABLE STORAGE
;
; .X       CONTAINS # OF BYTES TO
;          READ FROM CURRENTLY
;          ACTIVE CHANNEL.
;
; .A       CONTAINS THE TYPE COMING
;          FROM THE CHANNEL.
;
;**********************************
FILLIT	; ENTRY POINT FOR NUMERIC DATA
;                       AFTER DATA IS READ
	CMP VALTYP      ;DO VARIABLE AND DATA
;                       TYPE DIFFER?
	BNE TCONVT      ;BRANCH IF SO
	LDY VARPNT      ;ELSE GET POINTER TO
	STY INDEX       ;STORAGE TO RECIEVE DATA
	LDY VARPNT+1    ;AND PUT IT IN PAGE...
	STY INDEX+1     ;0 FOR INDIRECT MOVE
	JMP XFR         ;GO DO THE TRANSFER TO USER SPACE
;
TCONVT	LDY #<FAC       ;SINCE TYPES DIFFER
	STY INDEX       ;POINT TO FLOATING ACC.
	LDY #>FAC
	STY INDEX+1
;---------XFR IS THE ENTRY POINT FOR STRING DATA
XFR	PHA             ;SAVE VARIABLE TYPE FOR AFTER LOOP
	LDY #0          ;INITIALIZE STORE INDEX
	CMP #2
	BNE XFRLUP      ;BRANCH IF SO
	INY
XFRLUP	JSR ACPTR       ;GET A BYTE FROM
;                       ACTIVE CHANNEL
	STA (INDEX)Y    ;AND PUT IT IN USER'S STORAGE.
	INY             ;NEXT BYTE INDEX
	DEX             ;DECREMENT LOOP COUNT
	BNE XFRLUP
;
	PLA             ;GET DATA TYPE
	CMP VALTYP      ;WERE DATA AND VARIABLE TYPE EQUAL?
	BEQ FILRTS      ;BRANCH IF SO
	STA FAC-1       ;PUT DATA TYPE HERE FOR DCONV
	LDA VALTYP      ;CONVERT TO THIS VARIABLE TYPE
	JSR DCONF       ;DO THE CONVERSION IN PLACE
	LDY VALTYP      ;GET INDEX
	LDX TYPLEN,Y    ;INTO #OF BYTES/TYPE TABLE
	LDY #0          ;INIT TRANSFER INDEX
;
LUPXFR	LDA FAC,Y       ;GET CONVERTED BYTE
	STA (VARPNT)Y   ;STORE IN USER'S SPACE
	INY             ;BUMP INDEX
	DEX             ;DECREMENT LOOP COUNTER.
	BNE LUPXFR      ;BRANCH IF NOT DONE
;
FILRTS	RTS             ;RETURN
;
TYPLEN	.BYT 5,2,12
.END
