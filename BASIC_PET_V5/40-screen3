.PAG 'SCREEN3 4/19/80'
WRAPIT	JSR NXLN        ;WRAP THE NEXT LINE AROUND AND CONECT
PUTBIT	JSR GETBIT      ;PUT BIT OF CURENT LINE IN CARRY
	SEC
	JSR CLOSBT      ;PUT THE CARRY BIT IN PLACE
	RTS
;***************************************************
GETBIT	LDA TBLX        ;GET CURRENT SCREEN LINE NUMBER
GETBT2	JSR BITBYT      ;CALCULATE WHICH BIT IN WHICH BYTE CORESSPONDS
	JSR OPENBT      ;PUT THE LINE'S BIT IN THE CARRY
	RTS
;************************************************
BITBYT	TAY             ;SAVE LINE NUMBER
	LSR A           ;DIVIDE BY 8
	LSR A
	LSR A
	TAX             ;USE RESULT AS LOOP COUNTER
	STA THEBYT      ;AND AS AN INDEX INTO BITABL
	BEQ BITRTS      ;BRANCH IF IN 0 BYTE
.SKI
	TYA             ;CALCULATE BIT INDEX
	DEX             ;COMPENSATE
	SEC
BIT10	SBC #8          ;BACK A BIT ROW
	DEX
	BPL BIT10
	.BYT $A2        ;SKIP A BYTE
BITRTS	TYA
	STA THEBIT
	RTS
OPENBT	LDX THEBIT      ;GET BIT INDEX
	LDY THEBYT
	LDA BITABL,Y    ;GET THE PROPER BIT 'MAP' SECTION
LOUP1	ROL A           ;PUT CARRY INTO B0, B7 INTO CARRRY
	DEX
	BPL LOUP1
	RTS
CLOSBT	LDX THEBIT
CLOS2	ROR A           ;ROTATE CARRY BIT INTO BYTE (THEBIT) PLACES
	DEX
	BPL CLOS2
	STA BITABL,Y
	RTS
.PAG
BITSUP	JSR SCRUP       ;SCROLL THE SCREEN AT LEAST 1
	LDA SCTOP
	STA SEDT3       ;DELETE THE TOP BIT, SHOVE THE REST UP
	DEC TBLX        ;MAKE LINE INDEX MOVE WITH THE SCROLL
	DEC SEDT1
	DEC LSXP        ;THE LAST LINE POINTER
SCRBIT	CMP SCBOT       ;CONTINUE TO SHIFT BITS?
	BEQ UPOUT       ;BRANCH IF DELETE COMPLETE
	INC SEDT3
	LDA SEDT3       ;GET BIT FOR THIS LINE
	JSR GETBT2
	PHP             ;SAVE THE CARRY BIT
	DEC SEDT3       ;BACKUP A LINE
	LDA SEDT3       ;POSITION TO THE BIT FOR THIS LINE
	JSR GETBT2
	PLP             ;GET BIT OF LOWER LINE
	JSR CLOSBT      ;AND PUT IT AT CURRENT LINE
	INC SEDT3
	LDA SEDT3
	BPL SCRBIT      ;DO SOME MORE
UPOUT
	LDA SCBOT       ;THE BOTTOM LINE CAN'T BE WRAPPED NOW
	JSR CLRBIT      ;SO MAKE SURE ITS CLEARED
	LDA SCTOP       ;WE CAN'T HAVE A LINE START AS CONTINUED
	JSR CLRBIT      ;SO CLEAR IT TOO
	LDA LOGSCR      ;DO WE WANT A LOGICAL SCROLL
	BMI SCROUT      ;BRANCH IF SO
	BCS BITSUP      ;ELSE MAYBE A LOGICAL SCROLL
SCROUT
	JMP STUPT       ;MAKE IT CURRENT
CLRBIT
	JSR GETBT2      ;FIND THE BIT TO CLEAR
	PHP             ;SAVE IT IN CARRY BIT
	CLC
	JSR CLOSBT      ;PUT THE CLEARED BIT BACK
	PLP             ;GET WHAT IT WAS BEFORE CLEARING
	RTS
.SKI
BITSDN	LDA SCBOT
	STA SEDT3       ;USE SEDT3 AS LINE NUMBER
BITS2D	CMP SCTOP       ;ARE WE AT THE TOP YET
	BEQ SCRTS       ;BRANCH IF SO
	DEC SEDT3       ;BACK UP A LINE
	LDA SEDT3
	JSR GETBT2      ;GET THE BIT FOR LINE
	PHP             ;SAVE CARRY BIT
	INC SEDT3       ;DOWN A LINE
	LDA SEDT3
	JSR GETBT2      ;GET THIS LINE'S BIT
	PLP             ;GET ABOVE LINE'S BIT
	JSR CLOSBT      ;MOV BIT FROM ABOVE LINE DOWN
	DEC SEDT3       ;UP A LINE
	LDA SEDT3
	BPL BITS2D      ;BRANCH ALWAYS
SCRTS	RTS
FISTRT	LDA SCBOT       ;ARE WE BELOW THE SINDOW?
	CMP TBLX
	BCS INWIND      ;BRANCH IF SO
	DEC TBLX        ;ELSE BACK UP 1
INWIND
	JSR GETBIT      ;FIND START OF CURRENT LINE
	BCC FND0        ;BRANCH IF FOUND
	DEC TBLX        ;UP A LINE
	BPL INWIND
	INC TBLX        ;WHOOPS WENT TOO FAR
FND0	JMP STUPT       ;ESTABLISH THIS ONE AS CURRENT LINE
FNDEND	INC TBLX
	JSR GETBIT      ;IS THIS LINE CONTINUE1801  INC TBLX ;WHOOPS WENT TOO FAR
	BCS FNDEND      ;BRANCH IF SO
	DEC TBLX        ;FOUND IT - COMPENSATE FOR INC TBLX
	JSR STUPT       ;MAKE IT CURRENT
	LDY SCRT        ;GET RIGHT MARGIN
	STY PNTR        ;POINT TO RIGHT MARGIN
	JSR NXTCHR
ELOUP1	JSR BAKCHR
	BCS ENDBYE      ;IF AT TOP LEFT GET OUT
	LDA (PNT)Y
	CMP #$20
	BNE ENDBYE
	CPY SCLF        ;ARE WE AT THE LEFT MARGIN?
	BNE ELOUP1      ;BRANCH IF NOT
	JSR GETBIT      ;IF WE'RE ON A WRAPED LINE
	BCC ENDBYE      ;BRANCH IF NOT WRAPED
	CLC             ;ELSE A BLANK WRAPED LINE
	JSR CLOSBT      ;UN WRAP IT
	JMP ELOUP1      ;AND SCAN THE ABOVE LINE
ENDBYE	LDA TBLX        ;GET LINE OF LAST CHARACTER...
	STA SEDT4       ;IN CASE NXTCHR GOES TO NEXT LINE
	JSR NXTCHR
	LDY PNTR
	STY INDX        ;REMEMBER THIS
	RTS
NXTCHR	PHA
	LDY PNTR
	CPY SCRT        ;ARE WE AT THE RIGHT MARGIN?
	BCC BUMPNT      ;BRANCH IF NOT
.SKI
	JSR NXLN        ;POINT TO NEXTLINE
	LDY SCLF        ;POINT TO FIRST CHAR OF 1ST LINE
	.BYT $A9        ;LOAD IMEDIATE (SKIP THE INY)
BUMPNT	INY             ;INCREMENT CHAR INDEX
	STY PNTR
	PLA
	RTS
BAKCHR	PHA
	LDY SCLF
	CPY PNTR        ;ARE WE AT THE LEFT MARGIN
	BCC BAKOUT      ;BRANCH IF NOT
	LDY SCTOP
	CPY TBLX        ;ARE WE AT TOP LINE LAST CHARACTER?
	BCC CONBAK      ;BRANCH IF NOT
	BCS BAKOT2      ;LEAVE WITH CARRY SET
CONBAK	JSR BKLN        ;ELSE BACKUP A LINE
	LDY SCRT        ;MOVE CURSOR TO RIGHT SIDE
	STY PNTR
	PLA
	CLC             ;RETURN IS A-OK
	RTS
.SKI
BAKOUT	DEC PNTR
BAKOT2	LDY PNTR
	PLA
	RTS             ;RETURN CARRY CLEAR
.PAG
DELEET	JSR BAKCHR      ;DELETE THIS CHARACTER
	BCS OUTBAK      ;BRANCH IF AT TOP LEFT OF WINDOW
	LDA SCRDIS      ;SAVE SCROLL STATE
	PHA
	SEC             ;SET BIT 7 OF SCRDIS
	ROR SCRDIS
	LDA PNTR        ;SAVE CURSOR POSITION
	STA SEDT1
	LDA TBLX
	STA SEDT2
	JSR FNDEND      ;FIND THE END OF LINE
	LDA TBLX        ;SAVE INDEX OF LAST DISPLAY LINE
	STA SEDT3
	LDA SEDT2       ;START THE DELETE AT CURSOR
	STA TBLX
	LDY SEDT1
	STY PNTR
	JSR STUPT
DELOOP
	CPY INDX        ;ARE WE DONE YET?
	BCC DOLOOP      ;BRANCH IF NOT
	LDA TBLX        ;CHECK TO SEE IF WE ARE ON SAME LINE
	CMP SEDT3
	BEQ DOUTEX      ;BRANCH IF ON SAME LINE - DONE
DOLOOP	JSR NXTCHR
	CPY SCLF        ;SPECIAL CASE - IMPLIED CARRIAGE RETURN
	BNE RGULAR      ;BRANCH IF REGULAR DELETE
	JSR GETBIT      ;CHECK TO SEE IF WRAPED LINE
	LDY PNTR        ;GET CHARACTER POINTER
	BCS RGULAR      ;BRANCH IF NEXT LINE IS WRAPED
	JSR BAKCHR      ;JUST BACKUP 1 CHAR & PUT A BLANK
	JMP DOUTEX      ;GO PUT THE BLANK AND EXIT
RGULAR
	LDA (PNT)Y      ;MOVE THIS CHAR BACK ONE CHARACTER
	JSR BAKCHR
	JSR DSPP
	JSR NXTCHR
	BCC DELOOP      ;BRANCH IF NOT AT LASTCHAR AT BOTTOM
	LDX SCRT        ;BE SURE TO BE AT RIGHT MARGIN
	STX PNTR
	DEC TBLX        ;COMPENSATE FOR FNDEND
DOUTEX
	LDA #$20
	JSR DSPP        ;PUT A BLANK ON LAST CHAR
	LDA SEDT1       ;RESTORE CURSOR POSTION
	STA PNTR
	LDA SEDT2
	STA TBLX
	PLA             ;RESTORE SCROLL STATUS
	STA SCRDIS
OUTBAK	JMP STUPT       ;UPDATE PNT
.PAG
INSERT	LDA SCRDIS      ;SAVE SCROLL STATE
	PHA
	SEC
	ROR SCRDIS      ;DISABLE SCROL
	LDA TBLX
	STA SEDT1       ;SAVE CURSOR POSITION
	LDA PNTR
	STA SEDT2
	JSR FNDEND      ;FIND END OF LINE
	PLA             ;RESTORE SCROLL STAT
	STA SCRDIS
	CPY SCLF        ;ARE WE AT LEFT MARGIN
	BNE INSYES      ;BRANCH IF NOT
	LDX SCBOT       ;ARE WE AT BOTTOM OF WINDOW
	CPX TBLX
	BCS NOTBOT      ;BRANCH IF NOT
	LDA SCRDIS      ;IS SCROLL ENABLED
	BNE RSTRX       ;BRANCH IF SCROLL DISABLED
	LDA TBLX        ;SAVE ENDING#
	PHA
	JSR FISTRT      ;FIND THE BEGINING OF THE LINE
	PLA
	STA TBLX        ;RESTORE ENDLINE
	CPX SCTOP       ;IS START AT TOP OF WINDOW
	BEQ RSTRX       ;BRANCH IF IT IS
	JSR BITSUP      ;SCROLL UP
	JMP BITWRP      ;AND WRAP LINE AROUND
NOTBOT	LDA SCRDIS
	BNE RSTRX       ;BRANCH IFF SCROLL DISABLED
	LDX TBLX        ;GET CURRENT LINE INDEX
	LDA SCTOP       ;SAVE CURRENT TOP
	PHA
	STX SCTOP
	JSR SCRDWN      ;SCROLL BELOW END OF LINE
	JSR BITSDN      ;ADJUST BITMAP
	PLA
	STA SCTOP       ;RESTTORE TOP OF SCREEN
BITWRP	JSR PUTBIT
INSYES	JSR STUPT       ;POINT TO END LINE
INS10	LDA SEDT2       ;AT THE CURSOR YET?
	CMP PNTR
	BCC INSCON      ;BRANCH IF NOT
	LDA SEDT1       ;AT SAME LINE OR LESS?
	CMP TBLX        ;IF <= THEN DONE
	BCS INSOUT      ;BRANCH IF LINE# <=
INSCON	JSR BAKCHR
	BCS INSOUT      ;IF AT TOPLEFT GET OUT
	LDA (PNT)Y
	JSR NXTCHR
	JSR DSPP
	JSR BAKCHR
	BCC INS10
INSOUT	INC INSRT
	BNE *+4
	DEC INSRT
	LDA #$20
	JSR DSPP
RSTRX	LDA SEDT1       ;RESTORE CURSOR
	STA TBLX
	LDA SEDT2
	STA PNTR
	JMP STUPT       ;RESTORE CURSOR POSITION
.END
