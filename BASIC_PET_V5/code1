.PAG 'CODE1'
;********************************
;
; GENERAL ERROR HANDLING ROUTINES
;
;*******************************
; ERROR CODE FUNCTION
;
ENO	LDY ERRBYT      ;GET ERROR CODE BYTE
	JMP SNGFLT      ;FLOAT IT - LET SNGFLT RETURN FOR ME
;
;*******************************
;
; ERROR LINE NUMBER FUNCTION
;
;*******************************
;
LNO	LDY ERRLIN      ;GET LO BYTE OF ERROR LINE #
	LDA ERRLIN+1    ;GET HI ORDER BYTE OF LINE#
	JMP GIVAYF      ;FLOAT IT - GIVAYF RETURNS FOR ME
;
;********************************
;
; FUNCTION TO TURN OFF ERROR TRAP PROCESSING
;
;********************************
;
OFFERR	CMP #ERRTK      ;CHECK SYNTAX MAKE SURE HE
;SAID "OFF ERROR"
	BEQ YESOK       ;BRANCH IF HE DID
	JMP SNERR ELSE ITS AN ERROR
YESOK	LDA #0          ;TURN OFF THE ON ERROR FLAG
	STA ACTERR      ;UPDATE ERROR FLAG -OFF-
	JMP CHRGET      ;AND POINT TO NEXT STATMENT
;CHRGET RETURNS FOR ME
;*********************************
;
; ERROR MESSAGES AND ON ERROR PROCESS
;
;*********************************
OMERR	LDX #ERROM      ;OUT OF MEMORY ERROR
ERROR	LDA #0          ;CLR FLAGS
	STA LINEIN      ;CLR LINEINPUT
	JSR USGRTE      ;CLR PRINT USING
	LDA CURLIN+1
	CMP #255        ;CURLIN=255 IF DIRECT MODE
	BEQ NOTACT      ;BRANCH IF IN DIRECT MODE
	LDA CURLIN      ;GET LINE# THE ERROR OCCURED ON
	STA ERRLIN      ;PUT LOW ORDER BYTE HERE FOR LNO(X)
	LDA CURLIN+1    ;GET HIGH ORDER BYTE
	STA ERRLIN+1    ;ALSO FOR LNO(X)
	STX ERRBYT      ;SAVE THE ERR TYPE BYTE
	JSR IODONE      ;MAKE SURE CHANNELS ARE CLEAN
	LDX ERRBYT      ;RECOVER TYPE BYTE
	BIT ACTERR      ;WHEN BIT7=1 ONERROR IS ACTIVE
	BPL NOTACT      ;BRANCH IF OFF
	BVS NOTACT      ;ELSE IF AN ERROR IS IN PROGRESS BRANCH
	LDA #$C0        ;INDICATE ERROR IS IN PROGRESS
	STA ACTERR      ;UPDATE STATUS BYTE
;
; GO GET THE LINE NUMBER TO XFR CONTROL TO
;
	LDA ONERR       ;GET LO BYT OF LINE NUMBER
	STA LINNUM      ;SET THIS UP AS ARGUMENT TO LUK4IT
	LDA ONERR+1     ;THE HI BYTE OF LINE#
	STA LINNUM+1    ;PUT IT HERE FOR LUK4IT
	JSR LUK4IT      ;FIND THE LINE NUMBER
;
; RE-SET THE STACK
;
	LDX #STKEND-257 ;SET THE STACK POINTER VALUE
	LDA ERRBYT
	CMP #ERROM      ;IF OUT OF MEMORY THEN RESET STACK
	BEQ RESTOS
	LDX STKOLD
RESTOS	STX STKRET      ;RESTORE STACK INFO
	TXS             ;PUT IT IN THE STACK POINTER
;
	JMP NEWSTT      ;ESTABLISH CONTROL AT THE LINE#
;
NOTACT=*
ERRCRD	JSR CRDO
	JSR OUTQST
GETERR	TXA             ;PUT ERROR NUMBER IN .A
	ASL A           ;MULTIPLY BY 2
	TAX
	LDA EMSGTB,X    ;GET LO BYTE OF ADDRESS
	LDY EMSGTB+1,X  ;GET HI BYTE OF ADDRESS
	CPX #BRSTP2
	BEQ ERRFIN
	JSR STROUT      ;PRINT THE ERROR MSG
TYPERR	JSR STKINI
	LDA #<ERR
	LDY #>ERR
ERRFIN	JSR STROUT
	LDY CURLIN+1
	INY
	BEQ READY
	JSR INPRT
	JSR AID         ;AUTO JUMP TO AID ON ERROR
.SKI 3
READY	LDA #<REDDY
	LDY #>REDDY
	JSR STROUT
.SKI 3
MAIN	JMP (IMAIN)
NMAIN	JSR INLIN
	STX TXTPTR
	STY TXTPTR+1
	LDA #0          ;MAX LENGTH IS 240 CHARS
	LDY #241        ; MAKE SURE => TRUNCATE LINE
	STA (TXTPTR)Y
	JSR CHRGET
	BEQ MAIN
	LDX CURLIN+1    ;SAVE CURRENT LINE
	STX CNTDN       ;...HERE
	LDX #255
	STX CURLIN+1
	BCC MAIN1
	JSR CRUNCH
	JMP GONE
MAIN1	JSR WNUMB       ; AUTO FIX 10/30/79
	CLC             ;NOT DIRECT MODE
	JSR CRUNCH
	STY COUNT
	JSR FNDLIN
	BCC NODEL
	LDY #1
	LDA (LOWTR)Y
	STA INDEX1+1
	LDA VARTAB
	STA INDEX1
	LDA LOWTR+1
	STA INDEX2+1
	LDA LOWTR
	DEY
	SBC (LOWTR)Y 
	CLC
	ADC VARTAB
	STA VARTAB
	STA INDEX2
	LDA VARTAB+1
	ADC #255
	STA VARTAB+1
	SBC LOWTR+1
	TAX
	SEC
	LDA LOWTR
	SBC VARTAB
	TAY
	BCS QDECT1
	INX
	DEC INDEX2+1
QDECT1	CLC
	ADC INDEX1
	BCC MLOOP
	DEC INDEX1+1
	CLC
MLOOP	LDA (INDEX1)Y
	STA (INDEX2)Y
	INY 
	BNE MLOOP
	INC INDEX1+1
	INC INDEX2+1
	DEX
	BNE MLOOP
NODEL	JSR RUNC
	JSR LNKPRG
	LDA BUF
	BNE *+5
	JMP MAIN
	CLC
	LDA VARTAB
	STA HIGHTR 
	ADC COUNT
	STA HIGHDS
	LDY VARTAB+1
	STY HIGHTR+1
	BCC NODELC
	INY
NODELC	STY HIGHDS+1
	JSR BLTU
	LDA LINNUM
	LDY LINNUM+1
	STA BUF-2
	STY BUF-1
	LDA STREND
	LDY STREND+1
	STA VARTAB
	STY VARTAB+1
	LDY COUNT
	DEY
STOLOP	LDA BUF-4,Y
	STA (LOWTR)Y
	DEY
	CPY #$FF        ;FIX FOR LINES >127 CHARS
	BNE STOLOP
FINI	JSR RUNC
	JSR LNKPRG
	JMP MAIN
LNKPRG	LDA TXTTAB
	LDY TXTTAB+1
	STA INDEX
	STY INDEX+1
	CLC 
CHEAD	LDY #1
	LDA (INDEX)Y
	BEQ LNKRTS
	LDY #4
CZLOOP	INY
	LDA (INDEX)Y
	BNE CZLOOP
	INY
	TYA
	ADC INDEX
	TAX
	LDY #0
	STA (INDEX)Y
	TYA
	ADC INDEX+1
	INY
	STA (INDEX)Y
	STX INDEX
	STA INDEX+1
	BCC CHEAD
LNKRTS	RTS
INLIN	LDX #0
INLINC	JSR BASIN
	CMP #13
	BEQ FININ1
	STA BUF,X
	INX
	CPX #BUFLEN+1
	BNE INLINC      ;IF =BUFLEN+1 CHARS IN THEN...
ILERR	LDX #ERRLS      ;STRING TOO LONG ERR
	JMP ERROR
FININ1	STX ENDCHR
	JMP FININL
.END
