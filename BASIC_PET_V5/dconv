.PAGE 'DCONV'
;
; DCONV ROUTINE  RSR 11/20/79
;
;   INPUTS - .X=(<REG) .Y=(>REG)
;          - .A=(TARGET FORM)
;   OUTPUTS - NUMBER IN (XY)
;
;    TARGETS - 00=BINARY
;            - 01=INTEGER
;            - 02=BCD
;            - $F0 = NOCONV( OR DEFAULT TYPE )
;    TEMPS USED -KMART .BYT
;               -REALTY .BYT
;               -INDEX3 .INDIRECT
;               -INDEX .INDIRECT
;               -FBUFFR *=*+13 TEMP
;               -FBUFFR+13 *=*+13 TEMP
;   SUBS CALLED -BINBCD (LOCAL EXT)
;               -BCDBIN (LOCAL EXT)
;               -QINT
;               -FLOATS
;               -MOVI12 (LOCAL INT)
;               -INFAC (LOCAL  INT)
;
DCONVT
DCONV	STA KMART       ;SAVE A
	CMP #$F0
	BCS DCO001      ;F0 OR FF THEN TYPE MISMATCH
	LDA INDEX1      ;SAVE INDEXES FOR RECURSION
	PHA
	LDA INDEX1+1
	PHA
	LDA INDEX3
	PHA
	LDA INDEX3+1
	PHA
	STX INDEX3      ;SAVE XY IN INDEX3
	STY INDEX3+1
	LDY #0
	LDA (INDEX3)Y   ;IN WANTED FORM ?
	BMI DCO001      ;F0 OR FF THEN TYPE MISMATCH
	CMP KMART
	BNE DC01        ; NOPE
DCO00	JMP DC13        ;END...
DCO001	JMP CHKERR      ;TYPE MISMATCH ERROR
;
DC01	STA REALTY      ;PRESENT TYPE
DC011	LDX #FACMSD-FACTYP ;MOVE FAC TO TEMP
DC012	LDA FACTYP,X
	STA FBUFFR+13,X
	LDA ARGTYP,X
	STA FBUFFR+26,X
	DEX
	BPL DC012
;
	LDA REALTY
	CMP #2          ;BCD?
	BEQ DC08        ;YES...DIFF CONV
	JSR INFAC       ;CHK TO SEE IF IN FAC ALREADY
	BEQ DC03        ;IN FAC
;
DC02	LDX #<FACTYP    ;(XY)=>FAC
	LDY #>FACTYP
	JSR MOVI12      ;GO MOVE
;
DC03	LDA REALTY      ;BIN NOW?
	BEQ DC06        ;YES...DIFF CONV
;
DC04	LDX #144        ; INT TO BIN CONV
	JSR FLOATS
	LDA #0          ;AND SET TYPE
	STA FACTYP
	LDA KMART       ;DONE ?
	CMP #2
	BNE DC09        ;YES
;
DC05	JSR BINBCD      ;NOPE WANT BCD
	JMP DC085
;
DC06	LDA KMART       ;BINARY CONVS
	CMP #02         ; BCD?
	BEQ DC05        ;YES
DC07	JSR AYINT       ;NO...CHANGE TO INT
	LDA FACMO       ;MOVE RESULTS INTO CORRECT POS..
	STA FACHO
	LDA FACLO
	STA FACMOH
	LDA #0
	STA FACMO       ;ZERO REST
	STA FACLO
	LDA #1          ;SET TYPE
	STA FACTYP
	BNE DC09        ;BRA
;
DC08	LDX #<FBUFFR    ;(XY)=>FBUFFR TEMP
	LDY #>FBUFFR
	JSR MOVI12
	JSR BCDBIN      ;BCD=>BIN
	LDA KMART       ;WANT INT ?
	CMP #1
	BEQ DC07        ;YES
	BNE DC09
;
DC085	LDX INDEX3      ;MOVE OUT OF FBUFFER
	LDY INDEX3+1
	LDA #<FBUFFR
	STA INDEX3
	LDA #>FBUFFR
	JMP DC105
;
DC09	JSR INFAC       ;CHK TO SEE IF
	BEQ DC13        ;STARTED IN FAC
DC10	LDX INDEX3      ;FAC=>(XY)
	LDY INDEX3+1
	LDA #<FACTYP
	STA INDEX3
	LDA #>FACTYP
DC105	STA INDEX3+1
	JSR MOVI12
	LDA INDEX       ;RESTORE INDEX3 FOR TESTS
	STA INDEX3
	LDA INDEX+1
	STA INDEX3+1
;
DC11	JSR INFAC
	BEQ DC13
	LDY #FACMSD-FACTYP ;TEMP=>FAC
DC12	LDX FBUFFR+13,Y
	STX FACTYP,Y
	DEY
	BPL DC12
DC13	LDA INDEX3+1    ;CHK IF INDEX3 = .ARG
	BNE DC14
	ORA INDEX3
	CMP #<ARGTYP
	BEQ DC16        ;DON'T TRANSFER IF ARG IS (XY)
DC14	LDY #ARGMSD-ARGTYP
DC15	LDX FBUFFR+26,Y
	STX ARGTYP,Y
	DEY
	BPL DC15
;
DC16	PLA             ;ALL DONE...
	STA INDEX3+1    ;..SO RESTORE INDEXES
	PLA
	STA INDEX3
	PLA
	STA INDEX1+1
	PLA
	STA INDEX1
	RTS
;
INFAC	LDA INDEX3+1    ;CHK IF INDEX3 = .FAC
	BNE INFAR
	ORA INDEX3
	CMP #<FACTYP
INFAR	RTS
;
MOVI12	STX INDEX       ;MOVES 13 BYTES
	STY INDEX+1
	LDY #FACMSD-FACTYP
MOVI0	LDA (INDEX3)Y   ;(INDEX3)=>(INDEX)
	STA (INDEX)Y
	DEY
	BPL MOVI0
	RTS
.PAG 'DCONV-BINBCD'
;
; BINARY TO BCD ROUTINE
;
;   INPUTS - FAC IN ACCUM FORM
;   OUTPUT - BCD NUMBER IN FBUFFR
;   TEMPS USED -XTMP1 .BYT
;              -XTMP2 .BYT
;              -XTMP3 .BYT
;              -FBUFFR *=*+13
;   SUBS USED -FOUT1X
;             -FOUT2X
;             -FOUT3X
;
BINBCD	LDA TARGET      ;SAVE GLOBAL TARGET ON STACK
	PHA
	LDA #0          ;ZERO ACCUM
	STA TARGET      ;LOCAL TARGET IS BIN
	LDX FACSGN      ;SAVE BIN SIGN
	STX XTMP3
	STA FACSGN      ;MAKE IT POS FOR CONVS
	LDX #13
BTD00	.BYT $9D        ;STA FBUFFR-1,X
	.WORD FBUFFR-1
	DEX
	BNE BTD00
;
	LDA #02         ;TYPE IS BCD
	STA FBUFFR
BTD01	LDA #20         ;BCD BUFFER INDEX
	STA XTMP1
	LDX FACEXP      ;SET UP FOR FOUT ROUT'S
	BEQ BTD05       ;NUMBER=0
;
BTD02	JSR FOUT1X      ;FOUT SUBROUTINES
	BMI BTD022      ;FIX FOR EXP ADJ
	CMP #0          ;>99999999
	BCS BTD022      ;WILL PRINT EXP
	ADC #$FF        ;SUBTRACT 1 -ADJ EXP
BTD022	SEC
	SBC #2          ;FOUT ADJ
	STA TENEXP
	TXA
	LDY #0          ;FOUT DATA
	LDX #@200
BTD025	JSR FOUT2X
	PHP             ;SAVE REGS
	PHA
	STA XTMP2       ;SAVE NUMBER
	TXA
	PHA
	LDA XTMP1       ;WHERE AT ?
	LSR A           ;UPPER OR LOWER
	TAX             ;MOVE FOR INDEX
	INX             ;COMMON CODE
	LDA XTMP2       ;GET NUMBER
	AND #$0F        ;ASCII TO BINARY
	BCS BTD03       ;FROM SHIFT
	DEX             ;UPPER BCD DIGIT
	ASL A
	ASL A
	ASL A
	ASL A
;
BTD03	ORA FBUFFR+2,X  ;INOT BCD ACCUM
	STA FBUFFR+2,X
	DEC XTMP1       ;ONE MORE DONE
	PLA             ;RESTORE REGS
	TAX
	PLA
	PLP
	JSR FOUT3X      ;FOUT SUBROUTINE
	BEQ BTD04       ;DONE
	CPY #TIMEND-FOUTBL ;FOUT TEST
	BNE BTD025      ; NOT EQUAL CONTINUE
;
BTD04	LDA TENEXP      ;ADD SIGN TO EXP
	ROL XTMP3
	ROL A
	STA FBUFFR+1    ;FACEXP DONE
BTD05	PLA             ;ALL DONE...RESTORE GLOBAL TARGET
	STA TARGET
	RTS
.PAG 'DCONV-BCDBIN'
;
; BCD TO BINARY ROUTINE
;
;   INPUTS - BCD NUMBER IN FBUFFR
;   OUTPUT - BIN NUMBER IN FAC
;   SUBS USED -BCDRND
;             -MUL10
;             -FINLOG
;             -FINE
;
BCDBIN	LDA TARGET      ;SAVE GLOBAL TARGET ON STACK
	PHA
	LDY #0          ;CLR FAC & SIGNS
	STY TARGET      ;LOCAL TARGET IS BIN
	LDX #$12        ;SIZE TO CLEAR
DTB00	STY DECCNT,X
	DEX
	BPL DTB00
;
	CLC
	LDA FBUFFR+1    ;GET EXP
	BPL DTB01       ;POS EXP ?
	SEC             ;EXP SIGN EXTEND
DTB01	ROR A
	BCC DTB02       ;MANTISSA SIGN TEST
	STX SGNFLG      ;NEG SGNFLG=$FF
DTB02	STA TENEXP      ;INTO TENS EXP
	LDX #5          ;INT XTMP1
	STX XTMP1       ;INT XTMP1
;
DTB03	LDA #9          ;INPUT TEN NUMBERS....
	STA DECCNT      ;...9 FOLLOW THE DP
;
DTB10	JSR MUL10       ;FOLLOWS FIN LOGIC
	LDX XTMP1       ;TEMP LOAD
	LDA FBUFFR+7,X
	AND #$F0        ;UPPER
	LSR A
	LSR A
	LSR A
	LSR A
	JSR FINLOG
	JSR MUL10
	LDX XTMP1
	LDA FBUFFR+7,X  ;LOWER
	AND #$0F
	JSR FINLOG
	DEC XTMP1
	BNE DTB10       ;UNTILL ALL TEN IN
;
DTB11	JSR FINE        ;GO CLEAN UP EXP
	LDA #0          ;SET TO BIN TYPE
	STA FACTYP
	PLA             ;RESTORE GLOBAL TARGET
	STA TARGET
	RTS             ;EXIT
.PAG 'DCONV-BCDRND'
;
; ROUND BCD FAC ROUTINE (BCDRND)
;
;     INPUTS - FAC HAS BCD NUMBER
;            - .A HAS (21- # OF DIGITS WANTED)
;              -  0=<.A=<20
;     OUTPUT - FAC HAS ROUNDED BCD NUMBER
;     TEMPS USED - ***NONE INT***
;     SUBS USED  - DNORM
;
BCDRND	LSR A           ;DIVIDE BY 2, CARRY TESTED LATER
	TAY             ;INTO REGS
	TAX
	LDA FACLSD,X    ;GET BCD DIGITS
	BCS BR02        ;LOWER ROUND
	SED             ;DECIMAL MODE
	ADC #5          ;ADD 5 FOR ADJUST
	CLD             ;DECIMAL CLR
;
BR00	AND #$F0        ;KILL LOWER
	STA FACLSD,X
	BCC BR03        ;NO CARRY FORM ADD
;
BR01	INY             ;NEXT MOST SIGNIFICCANT BYTE
	CPY #11         ;DONE?
	BEQ BR06        ;BRANCH IF SO
	SED
	LDA FACLSD,Y
	ADC #1
	STA FACLSD,Y    ;RESULT BACK
	CLD
	BCC BR03        ;NO CARRY ...DONE
	BCS BR01        ;BRA
;
BR02	CMP #$50        ;LOWER ADJ
	INX
	BCS BR01        ;GO PROP IT
;
BR03	LDA #0          ;ELSE CLEAN UP
BR04	DEX
	BMI BR05        ;DONE?
	STA FACLSD,X
	BPL BR04        ;BRA
;
BR05	RTS             ;ALL DONE
;
BR06	JSR BR03        ;CLEAN UP FOR...
	SEC
	JMP DNORM       ;JOHN'S NORMALIZE ROUTINE
.PAGE 'DCONV-SYSCALLS'
;
; DBLCON - CONVERTS FAC &ARG TO TARGET TYPES
;
DBLCON	JSR TADJ        ;GET TYPE TO CONVERT TO
	JSR DCONF       ;DO IT TO FAC
	JSR TADJ        ;SAVE TO ARG
	JSR DCONA
TADJ	LDA TARGET      ;CONVERT TO TARGET TYPE
	LSR A
	BEQ TADJR       ;CONVERT INT TO BIN
	ASL A           ;RESTORE FOR DEC
TADJR	RTS
;
; DECL - DEC(FRML) USE LOCAL DECIMAL TARGET
; BIN  - BIN(FRML) USE LOCAL BINARY  TARGET
;
DECL	LDX #2          ;CONVERT TO DECIMAL
	.BYT $2C        ;SKIP 2
BIN	LDX #0          ;CONVERT TO BINARY
	JSR TARTCK      ;SET TARGET IF IT'S $F0
	LDA TARGET      ;SAVE GLOBAL TARGET
	PHA
	STX TARGET      ;.X HAS LOCAL TARGET
	JSR CHRGET      ;DUMP TOKEN
	JSR PARCH1      ;RECURSIVE CALL TO FRMEVL
	PLA             ;RESTORE GLOBAL TARGET
	STA TARGET
DBRTZ	RTS
;
; DCONF - CONVERT FAC IF FACTYP<>.A
; DCONA -CONVERT ARG IF ARGTYP<>.A
;
DCONF	LDX #<FACTYP
	.BYT $2C        ;SKIP
DCONA	LDX #<ARGTYP
	CMP $00,X       ;ARG AND FAC IN ZERO PAGE!
	BEQ DBRTZ
	LDY #>FACTYP
	JMP DCONVT      ;CONVERT
.END
