.PAGE 'BCD FIN & FOUT'
; FIN - INPUT BCD NUMBER (RSR 11/20/79)
;
;    EXPECTS TXTPTR TO POINT AT ASCII NUMBER
;    MOVES TXTPTR TO CHAR FOLLOWING NUMBER
;    ON RETURN BCD NUMBER IS IN FAC
;
;  TEMPS USED -DPTFLG .BYT
;             -EXPSGN .BYT
;             -DECCNT .BYT
;             -TENEXP .BYT
;   SUBS USED -CHRGOT
;             -CHRGET
;
FIN	PHP             ;STORE FLAGS FOR FINBIN
	LDX #2          ;CHK FOR FIN TYPE
	JSR TARTCK      ;ELSE DEFAULT
	CPY #2          ;DEC ?
	BEQ FINDEC
	CPY #$F0        ;DEFAULT ?
	BEQ FINDEC
	PLP             ;RESTORE FOR OLD FINBIN
	JMP FINBIN      ;USE BINARY FIN...
;
FINDEC	LDY #0          ;ZERO ACCUM
	LDX #17
FIN01	STY DECCNT-1,X
	DEX
	BNE FIN01
	LDY #20         ;INIT BCD DIGIT COUNT
	STY TENEXP
FIN02	PLP             ;CHAR IN .A RESTORE STATUS
	BCC FIN05       ;DIGIT
	JSR SIGNCK      ;CHK FOR + OR -
	BNE FIN035
	ROL DPTFLG      ;C INTO 0-BIT IF -
FIN03	JSR CHRGET      ;FETCH NEXT
	BCC FIN05       ;DIGIT
FIN035	CMP #'.
	BNE FIN04       ;NO CONTINUE
	BIT DPTFLG      ;CHK FOR PREVIOUS DP
	BMI FIN045      ;YES...MUST BE DONE?(REDO ERR)
	LDA #$80        ;SET FLAG
	ORA DPTFLG
	STA DPTFLG
	BNE FIN03       ;BRA ON .
;
FIN04	CMP #'E         ;E OR D FOR EXP
	BEQ FIN20       ;GOTO EXP ROUTINES
	CMP #'D
	BEQ FIN20       ;GOTO EXP ROUTINES
FIN045	JMP FIN26       ;MUST BE DONE
;
FIN05	AND #$0F        ;ENTER WITH ASCII DIGIT
	BNE FIN10       ;CONVERT TO BINARY
	BIT DPTFLG      ;CHK FOR LEADING ZEROS
	BVS FIN10       ;LEADING DIGIT
	BPL FIN03       ;NO LEADING DIGIT OR DP
FIN06	DEC DECCNT      ;.0 THEN
	BNE FIN03       ;BRA TO GET NEXT
;
FIN10	;DIGIT INPUT ROUTINE
FIN11	LDY TENEXP      ;CHK IF ALL SIG DIGITS IN
	CPY #2
	BEQ FIN15       ;YES CHK IF BEFORE "."
FIN12	LSR TENEXP      ;TENEXP/2=INDEX
	BCS FIN13       ;ODD
	ASL A           ;EVEN SO MOVE TO UPPER
	ASL A
	ASL A
	ASL A
	LDX TENEXP
	STA FACLSD,X    ;STORE BCD
	JMP FIN14
;
FIN13	LDX TENEXP      ;ODD SO INC TO POINT
	INX
	ORA FACLSD,X    ;STORE LOWER BCD DIGIT
	STA FACLSD,X
;
	SEC             ;GIVES CORRECT INDEX
FIN14	ROL TENEXP      ;RESTORE TENEXP
	DEC TENEXP
FIN15	BIT DPTFLG      ;FOLLOWING DP ?
	BVC FIN16       ;FIRST DIGIT-NO EXP CHANGE
	BMI FIN03       ;YES SO NO CHANGE
	INC DECCNT      ;BEFORE DP
	BNE FIN03       ;BRA GET NEXT
FIN16	LDA #$40        ;SET LEADING DIGIT FLAG
	ORA DPTFLG
	STA DPTFLG
	BIT DPTFLG      ; CHK FOR .1 CASE
	BMI FIN06
	BPL FIN03       ;BRA GET NEXT
;
;
FIN20	LDA #$0F        ;CLR FLAGS
	AND DPTFLG
	STA DPTFLG
FIN21	JSR CHRGET      ;EXPONENT INPUT
	BCC FIN225      ;DIGIT
	JSR SIGNCK      ;CHK FOR + OR -
	BNE FIN25       ;NOT EXPECTED...DONE?
	BCC FIN22       ;+
FIN215	LDA #$80        ;-FLAG SET
	ORA DPTFLG
	STA DPTFLG
;
FIN22	JSR CHRGET      ;NEXT CHAR
	BCS FIN26       ;DONE... NO DIGITS
FIN225	AND #$0F        ;ASCII TO BINARY
	BEQ FIN22       ;LEADING ZEROS
	STA FACEXP      ;STORE IN EXP
;
FIN23	JSR CHRGET      ;GET SECOND DIGIT
	BCS FIN25       ;DONE NO DIGIT
	AND #$0F
FIN24	STA EXPSGN      ;MULT BY TEN AND ADD
	LDA FACEXP
	ASL A
	ASL A
	ADC FACEXP
	ASL A
	ADC EXPSGN      ;SECOND DIGIT
	STA FACEXP
	CMP #65
	BCS OVERER      ;CHK FOR OVERFLOW
	JSR CHRGET      ;IF DIGIT<>NEXT THEN CONT ELSE OVERFLOW
	BCS FIN25       ;
OVERER	JMP OVERR       ;OVERFLOW ERROR
;
FIN25	BIT DPTFLG      ;MINUS
	BPL FIN26       ;NO..
	SEC             ;NEGATE
	LDA #0
	SBC FACEXP
	STA FACEXP
;
FIN26	CLC             ;ADD IN TEMP EXP
	LDA FACEXP
	ADC DECCNT
	BIT DPTFLG      ;CHK VALUES
	BPL FIN27
	CMP #%11000000  ;CHK FOR NEG OVERFLOW
	BMI OVERER
	BPL FIN28
;
FIN27	CMP #64         ;CHK FOR POS OVERFLOW
	BCS OVERER
FIN28	LSR DPTFLG      ;SHIFT FOR MANTISSA SIGN
	ROL A
	STA FACEXP      ;IN FACEXP
FINDNE	LDA FACMSD      ;CHK FOR 0.0 CASE
	BNE FIN29
	STA FACEXP      ;ZERO FACEXP IF 0.0 CASE
FIN29	LDA #2          ;BCD TYPE
	STA FACTYP
	RTS
;
; SIGNCK - CHECKS .A  FOR +,-,PLUSTK,MINUTK
;   + RETURNS Z FLAG
;   - RETURNS Z,C FLAGS
;
SIGNCK	CMP #'+
	BEQ SIX1
	CMP #PLUSTK
	BEQ SIX1
	CMP #'-
	BEQ SIX2
	CMP #MINUTK
	BEQ SIX2
SIX1	CLC
SIX2	RTS
;
; BINDEC - BIN BYTE TO DEC BYTE
;  .A - ENTERS WITH VALUE $0-$63
;  .A - LEAVES WITH VALUE 0-99 DECIMAL
;  ALL REGISTERS ARE USED
;
BINDEC	PHA             ;A ENTERS WITH BINARY
	LSR A
	LSR A
	LSR A
	LSR A
	TAX
	PLA
	AND #$F
	CMP #$A
	BCC SKIPBC
	ADC #$5
SKIPBC	SED             ;DECIMAL MODE
SKIPBD	DEX
	BMI DONEBD
	ADC #$16
	BCC SKIPBD
DONEBD	CLD
	RTS
;
.END
