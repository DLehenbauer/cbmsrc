.PAGE 'DECIMAL POWERS'
; RSR 5/29/80
;
; DECIMAL POWERS ROUTINE
; X^Y=EXP(Y*LOG(X))
; RSR 5/5/80
;
; USES TEMP STORAGE AT FBUFFER+14 (STACK PAGE)
;
FBUFFQ	=FBUFFR+14      ;TEMP STORAGE 13 BYTES
;
DPWRT	LDA FACMSD      ;CHECK BOUNDRY CONDITIONS
	BEQ DPWRT2      ; 1=X^0
	LDA ARGMSD
	BNE DPWRT1
	JMP DZEROF      ; 0=0^(Y IF Y<>0)
DPWRT1	LDX #<FBUFFQ
	LDY #>FBUFFQ
	LDA #2          ;DECIMAL STORAGE
	STA FBUFFQ
	JSR MOVMFT      ;MOVE FAC TO TEMP
	JSR MOVFA       ;ARG TO FAC
	JSR DLOG        ;LOG(ARG=X)
	LDA #<FBUFFQ
	LDY #>FBUFFQ
	LDX #2          ;DECIMAL TYPE
	JSR MOVAMT      ;MOVE TEMP TO ARG
	JSR DMULT       ; (ARG=Y)*(FAC=LOG(X))
DPWRT2	JMP DEXP        ;EXP((ARG=Y)*(FAC=LOG(X)))
.PAG 'DPWRT-RESUME'
;
; RESUME COMMAND - RESUMES STACK POINTER RSR 5/6/80
;
; RESUME -RESUMES ON LINE ERROR WAS AT
; RESUME NEXT -RESUMES ON LINE FOLLOWING ERROR
; RESUME LINENUMBER -GOTO LINENUMBER
;
RESTR	LDX #$80        ;CLR ERROR
	STX ACTERR
	LDX STKRET      ;GET STACK TO RESUME
	TXS
	TAX             ;SET FLAGS
	BEQ RESTR2      ;NO LINE NUMBER
	CMP #NXTTK      ;NEXT TOKEN?
	BEQ RESTR2
	JSR GOTO        ;ELSE GOTO LINE NUMBER
RESTR1	JMP NEWSTT
RESTR2	PHA
	LDA ERRLIN      ;SEARCH OUT LINE OF ERROR
	LDX ERRLIN+1
	STA LINNUM
	STX LINNUM+1
	JSR LUK4IT
	PLA
	BEQ RESTR1
	LDY #2          ;FIND NEXT STATEMENT
	LDA (TXTPTR)Y
	BEQ RESTR1      ;IF AT END STOP
	TAX
	DEY
	LDA (TXTPTR)Y
	TAY
	BNE RESTR3      ;BACK UP THE NEW TEXT POINTER
	DEX             ; IT WILL POINT AT 0 BYTE IN PREVIOUS
RESTR3	DEY             ;STATEMENT
	STX TXTPTR+1
	STY TXTPTR
RESTR4	JMP NEWSTT      ;IT WAS ERROR LINE
.PAGE 'DPWRT ERROR X'
;
; ERROR NUM -PRINT ERROR MESSAGE ASSOCIATED WITH ERROR
;
ERRORN	BNE *+5
	JMP SNERR       ;SYNTAX ERROR...MUST HAVE A VALUE
	JSR GETBYT      ;A BYTE VALUE
	CPX #BRSTOP+1   ;CHECK RANGE
	BCC *+5
	JMP QTYERR      ;ILLEGAL QUANITY ERROR
	TXA
	ASL A           ;*2
	TAX
	LDA EMSGTB,X    ;GET LOWER
	INX
	LDY EMSGTB,X    ;GET UPPER
	JSR STROUT      ;PRINT STRING
	JMP CRDO
;
.PAGE 'DPWRT-CURSOR'
;
; CURSOR(ROW,COL) RSR 6/6/80
;   POSISTIONS CURSOR, MAKES ROW A START LINE
;   GIVE ILLEGAL QUANITY ERROR IF POSISTION IS OUTSIDE CURRENT WINDOW
;
CURSOR	JSR GETBYT      ;GET ROW
	CPX SCTOP       ;CHECK LIMITS
	BCC IQERR
	CPX SCBOT
	BEQ CURS05
	BCS IQERR
CURS05	TXA             ;SAVE FOR LATTER USE
	PHA
	JSR CHKCOM      ;COMMA SEPARATOR
	JSR GETBYT
	CPX SCLF        ;CHECK LIMITS
	BCC IQERR
	CPX SCRT
	BEQ CURS10
	BCS IQERR
CURS10	STX PNTR        ;COL SET
	PLA             ;RESTORE
	STA TBLX        ;ROW SET
	JSR CLRBIT      ;ROW IS A START LINE
	JSR STUPT       ;MAKE OFFICAL
	JMP CHKCLS      ;FINISH OFF
;
IQERR	JMP QTYERR      ;ILLEGAL QUANITY ERROR
.END
