.PAG 'FOUT'
;*****************************
;
;  SUBROUTINE FOUT
;
; FUNCTION TO CONVERT AS REQUIRED BINARY FLOATING
; OR INTEGER TO BCD WHICH IS THEN FORMATED
; ACCORDING TO THE PRINT USING SPECIFICATIONS OR
; THE STANDARD PRINT SPECIFICATIONS
;
;*********************************
FOUT
	LDA #$0         ;FLAG DEFAULT FORMAT
	STA USINGV      ;INDICATE CALLER IS NOT PRINT USING
	JSR CLRARG      ;CLEAR ALL FORMAT GUYS
.SKI
	LDA FACTYP      ;CHECK IF WE SHOULD USE BINARY
	LSR A           ;IF THERE'S A BIT LEFT AFTER THIS...
	BNE FOUT2A      ;BRANCH IF ITS BCD
	JSR DCONF       ;ELSE CONV TO BIN IN CASE ITS INTEGER
	JMP FOUBIN      ;AND OUTPUT THE BFD
;
FOUT2A
	LDA #<FBUFFR    ;POINT TO OUTPUT BUF
	STA INDEX
	LDA #>FBUFFR
	STA INDEX+1
	LDA USINGV
	PHA
	JSR BCDOUT      ;CONVERT AND FORMAT THE NUMBER
	PLA
	STA USINGV
	LDA #0
	STA (INDEX1),Y  ;TAG THE END OF THE OUTPUT
	LDY #>FBUFFR    ;REQ: FBUFFR ON PAGE BOUNDRY!
	RTS
;
; ESTABLISH DEFAULTS IF CALLED FROM PRINT
; CHECK FOR FIELD OVERFLOW
; PAD LEFT FIELD
;
BCDOUT
	LDA FACTYP      ;SAVE VARIABLE TYPE BEFORE CONVERSION
	STA TYPSAV
	LDA #2          ;TELL DCONF TO CONVERT TO BCD
	JSR DCONF       ;DO THE CONVERSION IF NEEDED
	JSR PREFIL      ;PERFORM PRELIMINARY ADJUSTMENTS
	LDX #0          ;ZERO OUT 2 EXTRA BYTES OF FAC
	LDA FACEXP      ;SAVE THESE 2 BYTES ON THE STACK
	PHA
	STX FACEXP
	LDX #10         ;START WITH MOST SIGNIFICANT DIGIT
	JSR FMTBUF      ;PUT ASCII IN OUTPUT BUFFER
	PLA             ;RECOVER FACEXP
	STA FACEXP
	DEC RCNTSV      ;DID HE ONLY WANT A DP
	BNE WANTDP      ;BRANCH IF NOT
	DEY             ;BACK UP A CHAR
	LDA #$20
	STA (INDEX),Y   ;PUT A BLANK IN THE OUTPUT BUF
WANTDP
	STY DPTFLG      ;SAVE OUTPUT BUFFER INDEX
	LDA UFLAGS+EXPB ;TEST FOR EXPONENTIAL FORMAT
	BEQ TRCHAR      ;BRANCH IF NOT EXPONTIAL
.SKI
;
; CALCULATE PRINTED EXPONENT
;
	LDA FACEXP      ;GET EXP FOR CONV TO BCD
	LDX USINGV      ;IF PRINT CALLED
	BEQ PTCALL      ;BRANCH
	LDA #0          ;DEFAULT FOR EXPONENT SIGN IS PLUS
	STA EXPSGN
	JSR LSTSIG      ;WAS THE NUMBER 0?
	BEQ PTCALL      ;BRANCH IF SO
	LDA EXTEND      ;GET TRUE VALUE OF EXPONENT
	SEC             ;IGNORE CARRY
	SBC LCNTSV      ;EXP-LCOUNT
	CLC
	ADC #1          ;.A=EXP-LCOUNT+1
	BPL PTCALL      ;BRANCH IF POITIVE RESULT
	STA EXPSGN      ;FLAG EXPONENT AS NEGITIVE
	EOR #$FF        ;ELSE TAKE 2'S COMPLEMENT
	ADC #1
PTCALL
	JSR BINDEC      ;CONVERT THE EXP TO A BCD NUMBER
	LDY DPTFLG      ;RECOVER OUTPUT BUFFER INDEX
	STA FACLSD      ;PUT BCD EXPONENT IN FAC
	LDX #2          ;EXPONENT IS 2 BYTES OF OUTPUT
	STX LCOUNT      ;PUT IT HERE AS ARG TO FMTBUF
	LDA TYPSAV      ;IF TYPSAV=0 ITS E FORMAT
	LSR A           ;CHECK FOR SINGLE(E) OR DOUBLE PRECISSION
	BEQ EFORMT      ;BRANCH IF E FORMAT
.SKI
	LDA #'D         ;ELSE ITS D FORMAT
	STA (INDEX1),Y  ;PUT THE D IN THE OUTPUT BUFFER
	INY             ;BUMP OUTPUT BUFFER INDEX
	BNE EXPOUT      ;BRA TO ASCII CONVERTION
EFORMT
	LDA #'E         ;PUT AN "E" IN THE OUTPUT BUFFERR
	STA (INDEX1),Y
	INY             ;BUMP OUTPUT BUFFER INDEX
EXPOUT
	LDA EXPSGN      ;TEST EXPONENT SIGN
	BNE EXPNEG      ;BRANCH IF NEGETIVE SIGN
	LDA #'+         ;ELSE PUT POSITIVE SIGN IN
	STA (INDEX1),Y  ;OUTPUT BUFFER
	INY             ;BUMP OUTPUT BUFFER INDEX
	BNE OUTASC      ;BRA
EXPNEG
	LDA #'-         ;PUT A "-"
	STA (INDEX1),Y  ;IN THE OUTPUT BUFFER
	INY             ;BUMP THE OUTPUT BUFFER INDEX
OUTASC
	LDX #0          ;INDEX TO FIRST DIGIT OF FAC
	JSR FMTBUF      ;PUT IN OUTPUT BUFFER
BYE1	RTS             ;AND RETURN
.SKI
TRCHAR
	LDA UFLAGS+SGMB ;TEST FOR A TRAILING "-"
	BEQ NOTRMN      ;BRANCH IF NOT REQUESTED
	JMP FRSTCH      ;DO A BLANK OR A MINUS SIGN AND RETURN
NOTRMN
	LDA UFLAGS+STB  ;TEST TRAILING SIGN (ANY SIGN)
	BEQ BYE1        ;BRANCH IF NO TRAILING SIGN
	LDA #'+         ;PUT A PLUS SIGN OR A MINUS SIGN
	JMP FIRST2      ;INTO OUTPUT AND RETURN
.END
