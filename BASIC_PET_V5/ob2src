.PAG 'OB2SRC'
CLOSE	JSR PARS2
	LDA LA
CLOS5	;DOUBLE LABEL
FCLOSE	JSR JLTLK
	BNE JX170
CLOS10	JSR JZ100
	TXA
	PHA
	LDA FA
	BEQ JX150
	CMP #3
	BEQ JX150
	BCS JX120
	LDA SA          ;READ?
	AND #$F
	BEQ JX150       ;YES
	JSR ZZZ         ;NO. . .IT IS WRITE
	LDA #0
	JSR BO21
	JSR WBLK        ;EMPTY LAST BUFFER
	LDA SA
	CMP #$62        ;WRITE END OF TAPE BLOCK
	BNE JX150
	LDA #EOT        ;YES
	JSR TAPEH
	JMP JX150
JX120	JSR CLSEI
;
;ENTRY TO REMOVE A GIVE LOGICAL FILE
;FROM TABLE OF LOGICAL, PRIMARY,
;AND SECONDARY ADDRESSES
;
JX150	PLA
	TAX
	DEC LDTND
	CPX LDTND
	BEQ JX170
	LDY LDTND
	LDA LAT,Y
	STA LAT,X
	LDA FAT,Y
	STA FAT,X
	LDA SAT,Y
	STA SAT,X
JX170	RTS
STOP1	LDA STKEY
	CMP #$EF
	BNE STOP2
	PHP
	BIT ACTERR      ;LOAD BIT 6&7 INTO N AND V
	BPL STOP4       ;BRANCH IF ON ERROR IS OFF
	BVS IGNORE      ;BUT IF AN ERROR IS COMMITED
; THEN IGNORE FURTHER STOP KEY
STOP5	LDX #BRSTOP     ;INDICATE STOP KEY AS ERROR TYPE
	JMP ERROR       ;PROCESS THE ERROR
;
STOP4	JSR CLRCH
	STA NDX
	PLP             ;RESTORE EQUALITY
;
STOP2	RTS
;
IGNORE	PLP             ;GET LAST STATUS BYTE
	LDA #01         ;CLEAR THE Z BIT
	RTS             ;AND RETURN
;
STOP	JSR STOP1
	JMP BSTOP
SPMSG	JSR TXTST
	BNE STOP2
	JMP MSG
DDIREC	;USED IN DOS.WRITE
TXTST	LDA TXTPTR+1
	CMP #2
TXTRT	RTS
LD15	LDA FA ***MONITOR ENTRY
	BNE *+5
LD20	JMP SNERR
	CMP #3
	BEQ LD20
	BCC LD100
	LDA #$60
	STA SA
	LDY FNLEN
	BNE *+5
	JMP SNERR
	JSR LD300
	JSR OPENI
	JSR TALK
	LDA SA
	JSR SECND
	JSR ACPTR
	STA STAL
	LDA SATUS       ;TEST STATUS FOR ERROR
	LSR A
	LSR A
	BCS LD90
	JSR ACPTR
	STA STAH
LD30	JSR LD400
.SKI
LD40	LDA #$FD        ;MASK OFF TIMEOUT
	AND SATUS
	STA SATUS
	JSR STOP        ;EXIT ON STOP KEY
	JSR ACPTR       ;GET BYTE OFF IEEE
	TAX
	LDA SATUS       ;WAS THERE A TIMEOUT?
	LSR A
	LSR A
	BCS LD40        ;YES...RETRY
.SKI
	TXA
	LDY VERCK       ;PERFORMING VERIFY?
	BEQ LD50        ;NO...A LOAD
	DEY             ;.Y IS A 1...MAKE IT 0
	CMP (STAL)Y     ;COMPARE TO MEMORY
	BEQ LD60        ;VERIFIES O.K.
	LDA #SPERR      ;NO GOOD...VERIFY ERROR
	ORA SATUS
	STA SATUS
	.BYT $2C        ;SKIP OVER MEMORY STORE
LD50	STA (STAL)Y
LD60	INC STAL        ;INCREMENT POINTER
	BNE LD64
	INC STAH
LD64	BIT SATUS       ;EOI ?
	BVS LD65        ;YES...DONE
	BVC LD40        ;NO...CONTINUE LOAD
.SKI
LD90	LDX #ERR22      ;FILE NOT FOUND ERROR
	JMP ERROR       ;GO PROCESS THE ERROR
LD65	LDA STAL
	STA EAL
	LDA STAH
	STA EAH
	JSR UNTLK
	JMP CLSEI
LD100	JSR ZZZ
	JSR CSTE1
	JSR LD300
LD112	LDA FNLEN
	BEQ LD150
	JSR FAF
	BNE LD170
LD120	JMP OP160
LD150	JSR FAH
	BEQ LD120
LD170	CPX #BLF
	BNE LD112
	LDA SATUS
	AND #SPERR
	BEQ LD171
	RTS
LD171	JSR LDAD2
	JSR LD400
	JMP TRD
LOAD	LDA #0
	STA VERCK
LD10	JSR PARS1 ***VERIFY ENTRY
LOADNP	JSR SV60
	LDA #$FF
LD11	CMP STKEY
	BNE LD11
	CMP STKEY
	BNE LD11
	JSR LD15
	LDA VERCK
	BNE LD115
	JSR TWAIT
	LDA SATUS
	AND #SPERR
	BEQ LD210
LD209	LDY #0
	STY NDX
	LDY #MS22-MS1
	JMP ERMSG
LD210	LDY #MS19-MS1
	JSR SPMSG
	BIT DRUNFL      ;####DRUN#####
	BMI LD211       ;# DRUN ON #
	JSR TXTST
	BNE LD205
LD211	LDA EAH         ;DIRECT OR DRUN LOAD
	STA VARTAB+1
	LDA EAL
	STA VARTAB
	BIT DRUNFL      ;########
	BPL LD212
	JSR RUNC        ;#### DRUN ADDS
	JSR LNKPRG
	LDA #0          ;CLR DRUNFL
	STA DRUNFL
	JSR STXTPT      ;SET TXTPTR FOR RUN
	JMP NEWSTT      ;START EXECUTION ####
LD212	JMP FINI
LD205	JSR STXTPT      ;PROGRAM LOAD
	JMP FLOAD
LD300	JSR TXTST
	BNE LD115
	LDY #MS5-MS1
	JSR MSG
	LDA FNLEN
	BEQ LD115
	LDY #MS6-MS1
	JSR MSG
LD105	LDY FNLEN
	BEQ LD115
	LDY #0
LD110	LDA (FNADR)Y
	JSR BSOUT
	INY
	CPY FNLEN
	BNE LD110
LD115	RTS
LD400	LDY #MS10-MS1
	LDA VERCK
	BEQ LD410
	LDY #MS21-MS1
LD410	JSR SPMSG
	LDY #MS20-MS1
	JMP SPMSG
;USES BASIC ROUTINES TO PARSE
;LOAD,SAVE,VERIFY STATEMENTS
;     LOAD
;          (FILE NAME OPTION)
;          (OPT DEVICE #) DFLT=1
;          (EOT CMD) DFLT=0=NO
PARS1	LDX #0
	STX SATUS
	STX FNLEN
	STX SA
	INX
	STX FA
	JSR PR140
	JSR PR200
	JSR PR140
	JSR PR070
	STX FA
	JSR PR140
	JSR PR070
	STX SA
PR060	RTS
PR070	JSR PR150
	JMP GETBYT
OPENI	LDA SA
	BMI PR060
	LDY FNLEN
	BEQ PR060
	JSR LISTN
	LDA SA
	ORA #$F0
OPENIB	JSR SECND
	LDA SATUS
	BPL OP35
OP37	LDX #ERR23
	JMP ERROR       ;GO PROCESS THE ERROR
OP35	LDA FNLEN
	BEQ OP45
	LDY #0
OP40	LDA (FNADR)Y
	JSR CIOUT
	INY
	CPY FNLEN
	BNE OP40
OP45	JMP UNLSN
FAF	JSR FAH
	BEQ FAF40
	LDY #5
	STY T2
	LDY #0
	STY T1
FAF20	CPY FNLEN
	BEQ FAF30
	LDA (FNADR)Y
	LDY T2
	CMP (TBUF)Y
	BNE FAF
	INC T1
	INC T2
	LDY T1
	BNE FAF20
FAF30	TYA
FAF40	RTS
VER	LDA #1
	STA VERCK
	JSR LD10
	LDA SATUS
	AND #SPERR
	BEQ VER10
	LDY #MS12-MS1
	JMP ERMSG
VER10	LDY #MS18-MS1
	JMP MSG
;USES BASIC ROUTINES TO PARSE
;OPEN,CLOSE
;     OPEN LFN (NO DEFAULT)
;          DEV # (DFLT=1)
;         2ND ADR (DFLT=0 OR NONE)
;          FILE NM STRNG (DEF=NUL)
PARS2	LDX #0
	STX SA
	STX SATUS
	STX FNLEN
	INX
	STX FA
	JSR PR130
	JSR GETBYT
	STX LA
	JSR PR140
	JSR PR070
	STX FA
	CPX #3
	BCC PR100
	DEC SA
PR100	JSR PR140
	JSR PR070
	STX SA
PR111	JSR PR140
	JSR PR150
PR200	JSR FRMEVL
	JSR FRESTR
	STA FNLEN
	LDA INDEX1
	STA FNADR
	LDA INDEX1+1
	STA FNADR+1
	RTS
PR140	JSR CHRGOT
	BNE PR147
	PLA
	PLA
PR147	RTS
PR150	JSR CHKCOM
PR130	JSR CHRGOT
	BNE PR147
PR135	JMP SNERR
OPEN	JSR PARS2
OP94	LDA LA
FOPEN	BEQ PR135
OP98
	JSR JLTLK
	BNE OP100
	LDX #ERR20
	JMP ERROR
OP100	LDX LDTND
	LDY #0
	STY SATUS
	CPX #10
	BNE OPOK
	LDX #ERR19
	JMP ERROR
OPOK
	INC LDTND
;STORE OPEN FILE PARMS INTO TABLE
	LDA LA
	STA LAT,X
	LDA SA
	ORA #$60
	STA SA
	STA SAT,X
	LDA FA
	STA FAT,X
	BEQ OP175
	CMP #3
	BEQ OP175
	BCC OP150
	JMP OPENI
OP150	LDA SA
	AND #$F
	BNE OP200
	JSR CSTE1
	JSR LD300
	LDA FNLEN
	BEQ OP170
	JSR FAF
	BNE OP171
OP160
	LDX #ERR22      ;FILE NOT FOUND
	JMP ERROR
ERMSG	JSR CLALL
	LDA #$D
	JSR BSOUT
	LDA #$3F
	JSR BSOUT
	JSR MSG
	JMP TYPERR
OP170	JSR FAH
	BEQ OP160
	BNE OP171
OP200	JSR CSTE2
	LDA #BDFH
	JSR TAPEH
OP171	LDX FA
	LDA #BUFSZ-1
	LDY SA
	CPY #$60        ;OPEN FOR READ?
	BEQ OP172
	LDY #0
	LDA #BDF
	STA (TBUF)Y
	TYA
OP172	STA BUFPT-1,X
OP175	RTS
.END
