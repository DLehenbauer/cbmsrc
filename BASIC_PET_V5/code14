.PAG 'CODE14'
; RSR 5/29/80
;---CODE14--------------
	PHA
	LDA TXTPTR
	PHA
	LDA #$10        ;!SET FUNCTION TYPE
	PHA             ;! ON THE STACK
	JSR DATAB
	JMP DEFFIN
GETFNM	LDA #FNTK
	JSR SYNCHR
	ORA #128
	STA SUBFLG
	JSR PTRGT2
	STA DEFPNT
	STY DEFPNT+1
	JMP CHKNUM
FNDOER	JSR GETFNM
	LDA DEFPNT+1
	PHA
	LDA DEFPNT
	PHA
	JSR PARCH1
	JSR CHKNUM
	PLA
	STA DEFPNT
	PLA
	STA DEFPNT+1
	LDY #3          ;!PASS OVER TYPE&TEXT PTR
	LDA (DEFPNT)Y
	STA VARPNT
	SEC             ;!MAKE POINTER TO NAME
	SBC #2
	STA INDEX1
	INY
	LDA (DEFPNT)Y
	BEQ ERRGUF
	STA VARPNT+1
	SBC #0          ;!POINTER TO NAME
	STA INDEX1+1
	LDX #0          ;!PREPARE TO SAVE DUMMY
	LDY #0          ;! CONTENTS ON
	LDA (INDEX1),Y  ;!STACK,MOVE FAC
	BPL FNDX1       ;!TO DUMMY AND CALC-
	INX             ;!MUST FIND TYPE OF DUMMY
	INX             ;!FROM SYMBOL.-NO FUNCTION
;!(X)_BIN=0;STRING=1;DEC=2;INT=3
FNDX1	INY             ;!AT DUMMY-THANKS
	LDA (INDEX1),Y  ;!GET TYPE FROM
	BPL FNDX2       ;!TABLE INDEXED BY
	INX             ;!MS BITS OF SYMBOL
FNDX2	LDA TABTYP,X    ;!GOT IT
	STA VALTYP      ;!SAVE  IT FOR STACK
	LDX VARPNT      ;!MOVE IT TO STACK
	LDY VARPNT+1
	JSR MOVSMT      ;!TO STACK FROM MEMORY
	LDA VALTYP      ;!NOW THE TYPE
	PHA
	LDX VARPNT      ;!NOW FAC TO VARIABLE
	LDY VARPNT+1    ;!-CONVERT IF REQ'D
	JSR MOVMFT      ;!FAC TO VARIABLE
	LDA TXTPTR+1
	PHA
	LDA TXTPTR
	PHA
	LDY #1          ;!SET TO TEXT IN FUNCTION
	LDA (DEFPNT)Y
	STA TXTPTR
	INY
	LDA (DEFPNT)Y
	STA TXTPTR+1
	LDA VARPNT+1
	PHA
	LDA VARPNT
	PHA
	JSR FRMNUM
	PLA
	STA VARPNT      ;!TO VAR PNTR
	PLA
	STA VARPNT+1    ;!
	JSR CHRGOT
	BEQ *+5
	JMP SNERR
	PLA
	STA TXTPTR
	PLA
	STA TXTPTR+1
	LDX VARPNT      ;!MOVE STACK BACK TO
	LDY VARPNT+1    ;!DUMMY VAR
	PLA             ;!TYPE
	JSR MOVMST      ;!STACK TO MEMORY
	RTS
;-------------------
TABTYP	.BYTE 0,$FF,2,1 ;!BIN,STR,DEC,INT
;---------------
DEFFIN	LDY #0
	PLA
	STA (DEFPNT)Y
	PLA
	INY
	STA (DEFPNT)Y
	PLA
	INY
	STA (DEFPNT)Y
	PLA
	INY
	STA (DEFPNT)Y
	PLA
	INY
	STA (DEFPNT)Y
	RTS
;------------------
;
; STRD - CONVERT FAC VALUE TO STRING [STR$(X)]
;   INPUT - NUMBER IN FAC (CHECKS FOR A NUMBER)
;
STRD	JSR CHKNUM
	JSR FOUT
	PLA
	PLA
	PLA
;
; TIMSTR - MOVE FUBFFR STRING TO STRING SPACE
;
TIMSTR	LDA #<FBUFFR
	LDY #>FBUFFR
	BNE STRLIT      ; FBUFFR CANNOT BE IN ZPAGE!! BRA
;
STRINI	LDX FACMO
	LDY FACMO+1
	STX DSCPNT
	STY DSCPNT+1
STRSPA	JSR GETSPA
	STX DSCTMP+1
	STY DSCTMP+2
	STA DSCTMP
	RTS
STRLIT	LDX #34
	STX CHARAC
	STX ENDCHR
STRLT2	STA STRNG1
	STY STRNG1+1
	STA DSCTMP+1
	STY DSCTMP+2
	LDY #255
STRGET	INY
	LDA (STRNG1)Y
	BEQ STRFI1
	CMP CHARAC
	BEQ STRFIN
	CMP ENDCHR
	BNE STRGET
STRFIN	CMP #34
	BEQ STRFI2
STRFI1	CLC
STRFI2	STY DSCTMP
	TYA
	ADC STRNG1
	STA STRNG2
	LDX STRNG1+1
	BCC STRST2
	INX
STRST2	STX STRNG2+1
	LDA STRNG1+1    ;IF IN A BUFFER PAGE...
	CMP #>FBUFFR
	BEQ STRCP       ;...THEN MOVE OUT
	CMP #BUFPAG
	BNE PUTNEW      ;...ELSE CREATE TEMP POINTER
STRCP	TYA
	JSR STRINI
	LDX STRNG1
	LDY STRNG1+1
	JSR MOVSTR
;
; PUTNEW - PLACE TEMP POINTER TO STRING
;   CHECKS FOR STRING TEMP OVERFLOW (>3 TEMPS)
;   INCREMENTS TEMPPT TO NEXT POSISTION
;
PUTNEW	LDX TEMPPT
	CPX #TEMPST+STRSIZ+STRSIZ+STRSIZ
	BNE PUTNW1
	LDX #ERRST
ERRGO2	JMP ERROR
PUTNW1	LDA DSCTMP
	STA 0,X
	LDA DSCTMP+1
	STA 1,X
	LDA DSCTMP+2
	STA 2,X
	LDY #0
	STX FACMO
	STY FACMO+1
	STY FACOV
	STY FACTYP      ;!SET UP FAC PROPERLY
	DEY
	STY VALTYP
	STX LASTPT
	INX
	INX
	INX
	STX TEMPPT
	RTS
;
; GETSPA - GET STRING SPACE
;   .X CONTAINS SIZE WANTED - CAN RETURN OUT OF MEMORY ERROR
;   RETURNS- .A - LENGTH
;          - .X - LOW BYTE POINTER  TO SPACE
;          - .Y - HIGH BYTE POINTER TO SPACE
;          - FRESPC AND FRETOP POINT TO SPACE
;   STRING SPACE ALLOCATED IS FLAGED AS GARBAGE
;
GETSPA	LSR GARBFL
TRYAG2	TAX             ;SAVE IN X ALSO
	BEQ GETRTS      ;LENGTH OF 0 NO GO...
	PHA             ;SAVE A (LENGTH) ON STACK
	LDA FRETOP      ;LO BYTE
	SEC             ;FOR SUBTRACT
	SBC #2          ;MINUS 2 (LINK BYTES)
	LDY FRETOP+1
	BCS TRYAG3
	DEY
TRYAG3	STA INDEX1      ;SAVE FOR LATER
	STY INDEX1+1
	TXA
	EOR #255
	SEC
	ADC INDEX1
	BCS TRYAG4
	DEY
TRYAG4	CPY STREND+1
	BCC GARBAG
	BNE STRFRE
	CMP STREND
	BCC GARBAG
STRFRE	STA FRESPC
	STY FRESPC+1
	LDY #$01        ;FLAG STRING AS GARB.
	LDA #$FF
	STA (INDEX1),Y  ;FLAG
	DEY
	PLA             ;LENGTH
	STA (INDEX1),Y
	LDX FRESPC
	LDY FRESPC+1
	STX FRETOP
	STY FRETOP+1
GETRTS	RTS
GARBAG	LDX #ERROM      ;OUT OF MEMORY
	LDA GARBFL
	BMI ERRGO2
	JSR GARBA2
	SEC
	ROR GARBFL
	PLA
	BNE TRYAG2
.END
