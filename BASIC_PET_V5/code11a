.PAGE 'CODE11'
DIM3	JSR CHKCOM
DIM	TAX
	JSR PTRGT1
	JSR CHRGOT
	BNE DIM3
	RTS
;-------------------
DSIZE=13 ;!SIZE OF DEC VALUES
BSIZE=4+ADDPRC ;!SIZE OF BINARY
DZERO	.BYTE $02,0,0,0,0,0,0,0,0,0,0,0,0
;--MOVE TO BETTER LOC LATER --
ISIZE=BSIZE ;IN VARIABLE TABLE THEY ARE =
;!----GET POINTER TO VARIABLE
;!  PLACE ADR IN A,Y AND "VARPNT"
;!  TYPE IS IN X--
;! 0=BIN;1=INT;2=DEC;$FF(-1)=STRING;$10=FUNCTION.
PTRGET	LDX #0
	JSR CHRGOT
PTRGT1	STX DIMFLG
PTRGT2	STA VARNAM
	JSR CHRGOT
	JSR ISLETC
	BCS PTRGT3
INTERR	JMP SNERR
;----------------
PTRGT3	LDX #0
	STX VALTYP
	STX INTFLG
	JSR CHRGET
	BCC ISSEC
	JSR ISLETC
	BCC NOSEC
ISSEC	TAX
EATEM	JSR CHRGET
	BCC EATEM
	JSR ISLETC
	BCS EATEM
NOSEC	CMP #'$
	BNE NOTSTR
	LDA #$FF
	STA VALTYP
	BNE TURNON
NOTSTR	CMP #'%
	BEQ INTVX       ;!IT'S AN INTEGER
	BIT VARNAM      ;!LOOK FOR FUNCTION
	BMI FUNVX       ;!YES
	CMP #'&'        ;!LOOK FOR DEC
	BNE STRNAM      ;!IT'S BINARY
	LDA VARNAM      ;!GET  1'ST CHAR
	ORA #$80        ;!TURN ON FOR DEC/FUNCTION
	STA VARNAM      ;!PUT BACK
	LDA #$02        ;!SET TYPE=DEC
	STA VALTYP
	BNE STRNAX      ;!JMP SKIP &
FUNVX	LDA #$10        ;!SET TYPE=FUNCTION
	STA VALTYP
	BNE STRNAM      ;!JMP-NO CHAR TO SKIP
INTVX	LDA #$80
	STA INTFLG
	ORA VARNAM
	STA VARNAM
	LDA #1          ;!SET TYPE= INTEGER
	STA VALTYP
TURNON	TXA
	ORA #$80
	TAX
STRNAX	JSR CHRGET      ;!PASS $,%,&
STRNAM	STX VARNAM+1
	SEC
	ORA SUBFLG
	SBC #40
	BNE *+5
	JMP ISARY
	LDY #0
	STY SUBFLG
	LDA VARTAB
	LDX VARTAB+1
STXFND	STX LOWTR+1
LOPFND	STA LOWTR
	CPX ARYTAB+1
	BNE LOPFN
	CMP ARYTAB
	BEQ NOTFNS
LOPFN	LDA (LOWTR),Y   ;!FIRST BYTE
	BMI LOPCK       ;!FULL CHECK FOR THESE
	CMP VARNAM      ;!SEPERATE FUN,DEC,INT
	BNE NOTIT
	LDA VARNAM+1
	INY
	CMP (LOWTR)Y
	BNE NXTPTR
FINPTI	JMP FINPTR      ;!
NXTPTR	DEY
NOTIT	CLC
	LDA #6+ADDPRC   ;!
NOTITX	ADC LOWTR       ;!
	BCC LOPFND      ;!
	INX
	BNE STXFND      ;!ALWAYS
;-------------------------
LOPCK	CMP VARNAM      ;!FIRST BYTE
	PHP             ;!REMBER RESULT
	INY             ;!GET NEXT
	LDA (LOWTR),Y
	BMI PTRINX      ;!INTEGER
	INY             ;!LOOK AT TYPE FOR DEC/FUN
	LDA (LOWTR),Y   ;!TYPE IS IN 3'D
	DEY             ;!BACK TO 2'ND
	CMP #$10        ;!DEC OR FUNCTION?
	BEQ PTRINX      ;!FUN=INTEGER
	LDA #DSIZE+2    ;!SET SIZE IN TABLE
	BNE PTRX2       ;!ALWAYS
PTRINX	LDA #ISIZE+2    ;!INT/FUN
PTRX2	PHA             ;!SAVE ENTRY SIZE
PTRX3	LDA (LOWTR),Y   ;!SAME?
	CMP VARNAM+1    ;!2'ND BYTE
	BNE PTRINC      ;!NO-STEP TO NEXT
	LDA INTFLG      ;!INT DONE ALMOST
	BMI PTRX5       ;!CLEAN UP AND CHECK FIRST CHAR
	INY             ;!MUST CHECH TYPE
	LDA (LOWTR),Y   ;!FOR DEC/FUN
	CMP VALTYP      ;!IS TYPE ALSO THE SAME? ---
	BNE PTRINC      ;!NO-DO NEXT
PTRX5	PLA             ;!A HIT--MAYBE
	PLP             ;!WAS 1'ST =
	BEQ FINPTI      ;!YES---GO
	BNE PTRX4       ;!JMP TO INCREMENT
;------- INCREMENT TO NEXT ENTRY
PTRINC	PLA             ;!GET INCREMENT
	PLP             ;!DUMP FIRST RESULT
PTRX4	CLC             ;!SIZE IN A
	LDY #0          ;!RESET
	JMP NOTITX      ;!ENTER REST OF LOOP
;!---- IS CHAR A LETTER? C=YES --
ISLETC	CMP #'A
	BCC ISLRTS
	SBC #$5B
	SEC
	SBC #@245
ISLRTS	RTS
;--------------------------
NOTFNS	PLA
	PHA
ZZ6=ISVRET-1
	CMP #<ZZ6 
	BNE NOTEVL
LDZR	LDA #<ZERO
	LDY #>ZERO
	JSR SETYPE      ;!LOOK FOR DEC
	CPX #02         ;!
	BEQ LDZR1       ;!YES-SET UP DEC ZERO
	BNE LDZR2       ;!NO-BIN ZERO OK
LDZR1	LDA #<DZERO     ;!SET UP DEC ZERO
	LDY #>DZERO     ;!
LDZR2	JMP FINNOW      ;!NOTE X=TYPE
;----------------
NOTEVL	LDA VARNAM
	LDY VARNAM+1
	CMP #'T
	BNE QSTAVR
	CPY #@311
	BEQ LDZR
	CPY #@111
	BNE QSTAVR
GOBADV	JMP SNERR
QSTAVR	CMP #'S
	BNE QDSVAR
	CPY #'T
	BEQ GOBADV
QDSVAR	CMP #'D         ;DISK STATUS?
	BNE VAROK
	CPY #'S
	BEQ GOBADV      ;CANNOT MODIFY DS
	CPY #$D3
	BEQ GOBADV      ;CANNOT MODIFY DS$
;------------------
VAROK	LDA ARYTAB
	LDY ARYTAB+1
	STA LOWTR
	STY LOWTR+1
	LDA STREND
	LDY STREND+1
	STA HIGHTR
	STY HIGHTR+1
	LDA #6+ADDPRC   ;!ASSUME BIN
	LDX VALTYP      ;!IS IT DEC?
	CPX #02
	BNE VAROX1      ;!NO
	LDA #DSIZE+2    ;!YES-SET DEC SIZE
VAROX1	CLC             ;!
	ADC HIGHTR      ;!INC TO NEXT
	BCC NOTEVE
	INY
NOTEVE	STA HIGHDS
	STY HIGHDS+1
	JSR BLTU
	LDA HIGHDS
	LDY HIGHDS+1
	INY
	STA ARYTAB
	BNE ARYVA1
	INC ARYTAB
	LDA ARYTAB
ARYVA1	STY ARYTAB+1
	STA ARYPNT      ;SET POINTER TO ARRAYS
	STY ARYPNT+1
ARYVA2	LDA ARYPNT
	LDX ARYPNT+1
ARYVA3	CPX STREND+1    ;END OF ARRAYS ?
	BNE ARYVGO
	CMP STREND
	BEQ ARYDON      ;FINISHED...
ARYVGO	STA INDEX1      ;PARSE THE ARRAY
	STX INDEX1+1
	LDY #1-ADDPRC
	LDA (INDEX1),Y  ;ARRAY NAME
	TAX
	INY
	LDA (INDEX1),Y  ;NAME 2ND CHAR
	PHP             ;SAVE STATUS REG
	INY
	LDA (INDEX1),Y  ;POINT TO NEXT ARRAY
	ADC ARYPNT
	STA ARYPNT
	INY
	LDA (INDEX1),Y
	ADC ARYPNT+1
	STA ARYPNT+1
	PLP             ;RESTORE STATUS
	BPL ARYVA2      ;NOT A STRING TYPE
	TXA
	BMI ARYVA2      ;NOT A STRING ARRAY
	INY             ;OK WE HAVE A STRING ARRAY
	LDA (INDEX1),Y
	LDY #$00
	ASL A
	ADC #5
	ADC INDEX1
	STA INDEX1
	BCC ARYGET
	INC INDEX1+1
ARYGET	LDX INDEX1+1    ;PARSE ARRAY
	CPX ARYPNT+1    ;DONE WITH THIS ARRAY ?
	BNE GOGO
	CMP ARYPNT
	BEQ ARYVA3      ;YES...
GOGO	LDY #$00        ;PROCESS STRING POINTER
	LDA (INDEX1),Y
	BEQ DVARTS      ;NO STRING...GO ON...
	INY
	CLC
	ADC (INDEX1),Y
	STA HIGHTR
	TAX             ;SAVE IS X FOR CHECK
	INY
	LDA (INDEX1),Y
	ADC #$00        ;ADJUST HIGH BYTE
	STA HIGHTR+1
	CMP FRETOP+1    ;NO FIX IF BELOW FRETOP
	BCC DVARTS
	BNE GOGO1
	CPX FRETOP
	BCC DVARTS
;FIX BACKWARDS POINTER BY ADDING
;MOVE LENGTH TO IT
GOGO1	LDY #$00
	LDA (HIGHTR),Y
	ADC #6+ADDPRC-1 ;CARRY SET (CAREFUL)
	STA (HIGHTR),Y
	INY
	LDA (HIGHTR),Y
	ADC #$00
	STA (HIGHTR),Y  ;DONE WITH THIS STR.
;FIX THE NEXT STRING IN THE ARRAY
DVARTS	LDA #STRSIZ     ;BUMP BY FOUR6
	CLC
	ADC INDEX1
	STA INDEX1
	BCC ARYGET
	INC INDEX1+1
	BNE ARYGET      ;BRANCH ALWAYS
;
ARYDON	LDY #0
	LDA VARNAM
	STA (LOWTR)Y
	INY
	LDA VARNAM+1
	STA (LOWTR)Y
	LDX #ADDPRC+4   ;!BIN SIZE+EXTRA 1
	INY             ;!TO DATA
	LDA VALTYP      ;!LOOK FOR DEC
	BEQ ARYDN2      ;!INTO LOOP-SET A=0,DECEMENTS X.
	BMI ARYDN2      ;!STRING
	CMP #01         ;! INTEGER ?
	BEQ ARYDN2      ;!YES
	DEX             ;! SET X FOR POSSIBLE FUNCTION-
	CMP #10
	BEQ ARYDN1      ;!FUNCTION-STORE TYPE SO WE
;!ON THE NEXT SCAN
	LDX #DSIZE-1    ;!SET TYPE FIRST-THEN=0
.END
