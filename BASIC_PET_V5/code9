.PAG 'CODE9'
;---- FORMULA EVAL ---
FRMEVL	LDX TXTPTR
	BNE FRMEV1
	DEC TXTPTR+1
FRMEV1	DEC TXTPTR
	LDX #0
	.BYT $24
LPOPER	PHA
	TXA
	PHA
	LDA #1
	JSR GETSTK
	JSR EVAL
	LDA #0
	STA OPMASK
BTSTOP	JSR CHRGOT
LOPREL	SEC
	SBC #GREATK
	BCC ENDREL
	CMP #LESSTK-GREATK+1
	BCS ENDREL
	CMP #1
	ROL A
	EOR #1
	EOR OPMASK
	CMP OPMASK
	BCC SNERR5
	STA OPMASK
	JSR CHRGET
	JMP LOPREL
QOPI	JMP QOP         ;!
ENDREL	LDX OPMASK
	BNE FINREL
	BCS QOPI
	ADC #GREATK-PLUSTK
	BCC QOPI
	ADC VALTYP
	BNE *+5
	JMP CAT
	ADC #$FF
	STA INDEX1
	ASL A
	ADC INDEX1
	TAY 
QPREC	PLA
	CMP OPTAB,Y
	BCS QCHNUM
	JSR CHKNUM
DOPREC	PHA
NEGPRC	JSR DOPRE1
	PLA
	LDY OPPTR
	BPL QPREC1
	TAX
	BEQ QOPGO
	BNE PULSTK
FINREL	LSR VALTYP
	TXA
	ROL A
	LDX TXTPTR
	BNE FINRE2
	DEC TXTPTR+1
FINRE2	DEC TXTPTR
	LDY #PTDORL-OPTAB
	STA OPMASK
	BNE QPREC
QPREC1	CMP OPTAB,Y
	BCS PULSTK
	BCC DOPREC
DOPRE1	LDA OPTAB+2,Y
	PHA
	LDX OPTAB,Y     ;!GET HIGH PRECEDENCE
	LDA OPTAB+1,Y
	PHA
	JSR PUSHF       ;!PUSH UNPACKED FAC
	LDA OPMASK
	JMP LPOPER
SNERR5	JMP SNERR
;--- PUSH FAC TO STACK --
PUSHF=*
	PLA             ;!MAKE RTS
	STA INDEX1
	PLA
	STA INDEX1+1
	INC INDEX       ;!INCREMENT FOR JMP()
	BNE PSHZ
	INC INDEX1+1
PSHZ=*
	LDA FACTYP      ;!WHAT IS IT?
	LDY #BSIZE+1    ;!SET BINARY UNPACKED
	CMP #02
	BNE PBIN        ;!LOOK FOR DEC
	LDY #DSIZE-1    ;SET SIZE
	BNE PSHY        ;!JMP
PBIN	JSR ROUND       ;!BINARY
PSHY	LDA FACTYP,Y    ;!GET IT LS BYTE FIRST
	PHA             ;SHOVE IT
	DEY
	BPL PSHY
	JMP (INDEX1)    ;RTS,BUT STUFF ON STACK
QOP	LDY #255
	PLA
QOPGO	BEQ QOPRTS
QCHNUM	CMP #100
	BEQ UNPSTK
	JSR CHKNUM
UNPSTK	STY OPPTR
PULSTK	PLA
	LSR A
	STA DOMASK
	PLA
	STA ARGTYP      ;!GET TYPE FROM STACK
	PHP             ;SAVE CARRY
	CMP #2          ;CHK FOR BCD ON STACK
	BEQ PULDC1      ;YES GO PULL MORE
	PLP             ;RESTORE CARRY
;-- WATCH THAT CARRY FLAG
	PLA             ;!GET MS OF BINARY
	STA ARGEXP
	PLA
	STA ARGHO
	PLA
	STA ARGMOH
	PLA
	STA ARGMO
	PLA
	STA ARGLO
	PLA
	STA ARGSGN
	EOR FACSGN
	STA ARISGN
QOPRTS	LDA FACEXP
UNPRTS	RTS
PULDC1	LDY #1          ;! CONTINUE DEC
	PLP             ;TOSS  EXTRA OFF STACK
	CMP #2          ;!!! TEST
	BEQ *+5         ;!!!
	JSR ERRORZ      ;!!!
PULDC2	PLA             ;!GET FROM MS END
	STA ARGTYP,Y
	INY
	CPY #DSIZE
	BMI PULDC2
	CLC             ;FOR VALCHK TO WORK
	RTS
;-------------------
EVAL	LDA #0
	STA VALTYP
EVAL0	JSR CHRGET
	BCS EVAL2
EVAL1	JMP FIN
EVAL2	JSR ISLETC
	BCC *+5
	JMP ISVAR
	CMP #PI
	BNE QDOT
	LDX #0          ;MUST HAVE TARGET
	JSR TARTCK
	LDA #<PIVAL
	LDY #>PIVAL
	JSR MOVFM
	JMP CHRGET
PIVAL	.BYT @202
	.BYT @111
	.BYT @017
	.BYT @332
	.BYT @241
QDOT	CMP #'.
	BEQ EVAL1
	CMP #MINUTK
	BEQ DOMIN
	CMP #PLUSTK
	BEQ EVAL0
	CMP #34         ;('")
	BNE EVAL3
;
; STRTXT - IMMEDIATE STRING HANDLER
;
STRTXT	LDX #$FF
	JSR TARTCK      ;MAKE TARGET FF IF NOT SET
	LDA TXTPTR
	LDY TXTPTR+1
	CLC
	ADC #1          ;MOVE TXTPTR IN REGS PAST "-SYM
	BCC STRTX2
	INY
STRTX2	JSR STRLIT
	JMP ST2TXT
;
EVAL3	CMP #NOTTK
	BNE EVAL4
	LDY #24
	BNE GONPRC
NOTOP	LDA #0          ;CONVERT TO BIN
	JSR DCONF
	JSR AYINT
	LDA FACLO
	EOR #255
	TAY
	LDA FACMO
	EOR #255
	JMP GIVAYF
EVAL4	CMP #FNTK
	BNE *+5
	JMP FNDOER
	CMP #DECLTK     ;CHK FOR DEC
	BNE *+5
	JMP DECL
	CMP #BINTK
	BNE *+5
	JMP BIN
	CMP #ONEFUN
	BCC PARCH1
	LDX #02         ;DECIMAL DEFAULT
	CMP #ONEFUN+2   ;STR$
	BEQ EVAL90
	CMP #ONEFUN+9   ;CHR$
	BNE EVAL91
EVAL90	LDX #$FF        ;STRING DEFAULT FUNCS
EVAL91	JMP ISFUN
;
; PARCH1 - EVALUATE (FORMULA)
;
PARCH1	JSR CHKOPN
	JSR FRMEVL
;
CHKCLS	LDA #41
	.BYT $2C
CHKOPN	LDA #40
	.BYT $2C
CHKCOM	LDA #44
;
; SYNCHR - SYNTAX CHECKER .A IS SYNTAX CHAR WANTED
;
SYNCHR	LDY #0
	CMP (TXTPTR)Y
	BNE SNERR
	JMP CHRGET
SNERR	LDX #ERRSN
	JMP ERROR
;
DOMIN	LDY #21
GONPRC	PLA
	PLA
	JMP NEGPRC
.SKI 5
;
;TARTCK - CHECKS FOR $F0 TARGET
;
TARTCK	LDY TARGET
	CPY #$F0
	BNE TAAART
	STX TARGET      ;.X HAS SECONDARY TARGET
TAAART	RTS
;
.END
