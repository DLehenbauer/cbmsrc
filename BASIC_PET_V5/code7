.PAG 'CODE7'
; RSR 5/29/80
;
XSPAC1	JSR OUTSPC
	BNE XSPAC2
;
; STROUT - PRINT STRING <IF BELOW DSCTMP COPY TO STRING SPACE>
;   INPUTS - .A - INDEX LOW BYTE
;          - .Y - INDEX HIGH BYTE
;          STRING MUST END WITH A ZERO BYTE
;          IF USINGV <> 0 THEN RCOUNT IS USED TO CALC RIGHT PADDING
;
STROUT	JSR STRLIT
;
; STRPRT - PRINT STRING
;   INPUTS - FACMO POINTS AT STRING
;          - ELSE SAME AS STROUT
;
STRPRT	JSR FREFAC
	LDX USINGV      ;SEE IF PRINT USING
	BEQ STRAAC      ;NO JUST NORMAL
	LDX RCOUNT      ;OUT PUT RCOUNT ITEMS
	BNE STRAAA
STRAAC	TAX             ;DEFAULT SIZE
STRAAA	STA RCOUNT      ;NORMAL SIZE
	LDY #0
	INX
STRPR2	DEX
	BEQ PRTRTS
	LDA (INDEX)Y
	CPY RCOUNT      ;CHK IF WE MUST PAD
	BCC STRAAB
	JSR OUTSPC      ;OUTPUT A TRAILING SPACE
	BNE STRAAD
STRAAB	JSR OUTDO
STRAAD	INY
	CMP #13
	BNE STRPR2
	JSR CRFIN
	JMP STRPR2
OUTSPC
	LDA CHANNL
	BEQ CRTSKP
	LDA #' 
	.BYT $2C
CRTSKP	LDA #29
	.BYT $2C
OUTQST	LDA #'?
OUTDO	JSR BSOUT
OUTRTS	AND #255
	RTS
;
; TRMNOK - CHECK FORMAT OF DATA
;    IF BAD - INPUT = ERROR DO AGAIN
;           - READ  = SYNTAX ERROR AT DATA LINE
;
TRMNOK	LDA INPFLG
	BEQ TRMNO1
	BMI GETDTL
	LDY #255
	BNE STCURL
GETDTL	LDA DATLIN
	LDY DATLIN+1
STCURL	STA CURLIN
	STY CURLIN+1
SNERR4	JMP SNERR
TRMNO1	LDA CHANNL
	BEQ DOAGIN
RDERR	LDX #ERRBD
	JMP ERROR
DOAGIN	LDA #<TRYAGN
	LDY #>TRYAGN
	JSR STROUT
	LDA OLDTXT
	LDY OLDTXT+1
	STA TXTPTR
	STY TXTPTR+1
	RTS
GET	JSR ERRDIR
	CMP #'#
	BNE GETTTY
	JSR CHRGET
	JSR GETBYT
	LDA #',
	JSR SYNCHR
	JSR CHKIN
	STX CHANNL
ZZ2=BUF+1
GETTTY	LDX #<ZZ2
ZZ3=BUF+2
	LDY #>ZZ3
	LDA #0
	STA BUF+1
	LDA #64
	JSR INPCO1
	LDX CHANNL
	BNE IORELE
	RTS
;
; LINE INPUT RSR 4-15-80
;
LINPUT	LDA #INPTK      ;INPUT FOLLOWS
	JSR SYNCHR
	LDX #$80        ;SET LINE FLAG
	STX LINEIN
	JSR INPUT
	LDA #0
	STA LINEIN
	RTS
;
; INPUTN -INPUT FROM SYSTEM CHANNEL
;
INPUTN	JSR CHRGET      ;GET RID OF #
	JSR GETBYT
	LDA #',
	JSR SYNCHR
	JSR CHKIN
	STX CHANNL
	JSR NOTQTI
;
; IODONE - CLEAR I/O CHANNELS AND RESTORE TO KEYBOARD
;
IODONE	LDA CHANNL
IORELE	JSR CLRCH
	LDX #0
	STX CHANNL
	RTS
;
; INPUT - BASIC COMMAND INPUT[#LF][,OR;][FORMULA]ETC.
;
INPUT	CMP #'#         ;CHK FOR IEEE
	BEQ INPUTN      ;YES IEEE
	CMP #34         ;('")
	BNE NOTQTI
	JSR STRTXT
	LDA #59         ;(';)
	JSR SYNCHR
	JSR STRPRT
NOTQTI	JSR ERRDIR
	LDA #',
	STA BUF-1
GETAGN	JSR QINLIN
	LDA CHANNL
	BEQ BUFFUL
	LDA CSTAT
	AND #03         ;STOP FOR TIMEOUTS
	BEQ BUFFUL
	JSR IODONE      ;BAD INPUT FLUSH BUFFERS RESTORE TO KEYBOARD
	JMP DATAB
BUFFUL	LDA BUF
	BNE INPCON
	LDA CHANNL
	BEQ BUFSTP
	LDA CSTAT       ;CHECK FOR EOI AND C/R
	AND #$40
	BEQ GETAGN      ;NO EOI
	BNE INPCON      ;BRA TO C/R AND EOI
BUFSTP	STA LINEIN      ;CLR LINEINPUT
	BIT ACTERR      ;IF ONERROR
	BPL *+5
	JMP STOP5       ;THEN AS IF STOP KEY HIT
	CLC
	JMP STPEND
QINLIN	LDA CHANNL
	BNE GINLIN
	BIT LINEIN      ;LINE INPUT?
	BMI GINLIN      ;YES...NO ?
	JSR OUTQST
	JSR OUTSPC
GINLIN	JMP INLIN
READ	LDX DATPTR
	LDY DATPTR+1
	.BYT $A9
	TYA
	.BYT $2C
INPCON	LDA #0          ;HAVE INPUT SOMETHING BESIDES C/R
INPCO1	STA INPFLG
	STX INPPTR
	STY INPPTR+1
INLOOP	JSR PTRGET
	STX FORTYP      ;!KEEP TYPE FOR STORE
	STA FORPNT
	STY FORPNT+1
	LDA TXTPTR
	LDY TXTPTR+1
	STA VARTXT
	STY VARTXT+1
	LDX INPPTR
	LDY INPPTR+1
	STX TXTPTR
	STY TXTPTR+1
	JSR CHRGOT
	BNE DATBK1
	BIT INPFLG
	BVC QDATA
	JSR GETIN
	STA BUF
ZZ4=BUF-1
	LDX #<ZZ4
	LDY #>ZZ4
	BNE DATBK
QDATA	BMI DATLOP
	LDA CHANNL
	BNE GETNTH
	JSR OUTQST
GETNTH	JSR QINLIN
DATBK	STX TXTPTR
	STY TXTPTR+1
.END
