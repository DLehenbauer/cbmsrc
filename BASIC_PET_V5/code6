.PAG 'CODE6'
LET	JSR PTRGET
LET3	STA FORPNT
	STY FORPNT+1
	STX FORTYP
	LDA #EQULTK
	JSR SYNCHR
	LDA INTFLG
	PHA
	LDA VALTYP
	PHA
	JSR FRMEVL
	PLA
	ROL A
	JSR CHKVAL
	BNE COPSTR
	PLA
QINTGR	BPL COPFLT
	JSR ROUND
	LDA #0          ;CONVERT TO BINARY
	STA TARGET
	JSR DCONF       ;CONVERT IF IN BCD
	JSR AYINT
	LDY #0
	LDA FACMO
	STA (FORPNT)Y
	INY
	LDA FACLO
	STA (FORPNT)Y
	RTS
COPFLT	JMP MOVVF
COPSTR	PLA
INPCOM	LDY FORPNT+1
	CPY #>ZERO
	BNE GETSPT
	JSR FREFAC
	CMP #6
	BNE FCERR2
	LDY #0
	STY FACEXP
	STY FACSGN
	STY FACTYP      ;SET TYPE BINARY
TIMELP	STY FBUFPT
	JSR TIMNUM
	JSR MUL10
	INC FBUFPT
	LDY FBUFPT
	JSR TIMNUM
	JSR MOVAF
	TAX
	BEQ NOML6
	INX
	TXA
	JSR FINML6
NOML6	LDY FBUFPT
	INY
	CPY #6
	BNE TIMELP
	JSR MUL10
	JSR QINT
	LDX #2
	SEI
TIMEST	LDA FACMOH,X
	STA CTIMR,X
	DEX
	BPL TIMEST
	CLI
	RTS
TIMNUM	LDA (INDEX)Y
	JSR QNUM
	BCC GOTNUM
FCERR2	JMP FCERR
GOTNUM	SBC #$2F
	JMP FINLOG
GETSPT	LDY #2
	LDA (FACMO)Y
	TAX             ;X HAS HIGH
	DEY
	LDA (FACMO)Y    ;A HAS LOW
DSKX0	CPX FRETOP+1    ;MUST BE ABOVE FRETOP
	BCC DSKX1
	BNE COPY
	CMP FRETOP
	BCC DSKX1
	BNE COPY
DSKX1	CPX STREND+1    ;MUST BE BELOW STREND
	BCC COPY
	BNE DSKX3
	CMP STREND
	BCC COPY
DSKX3	LDY DSDESC      ;CHK IF A DS$
	BEQ DNTCPY      ;NONE
	CPX DSDESC+2    ;SEE IF IT IS == TO DS$
	BNE DNTCPY      ;IT'S NOT DON'T COPY
	CMP DSDESC+1
	BEQ COPY        ;IF DS$ THEN COPY
DNTCPY	LDA FACMO
	LDY FACMO+1
	JMP COPYC
COPY	LDY #0
	LDA (FACMO)Y
	JSR STRINI
	LDA DSCPNT
	LDY DSCPNT+1
	STA STRNG1
	STY STRNG1+1
	JSR MOVINS
; FIX TO FRE GET STRINGS
	LDA STRNG1      ;RESTORE .A & .Y
	LDY STRNG1+1
	JSR FRETMS      ;FRE THE TEMP STRING
;
	LDA #<DSCTMP
	LDY #>DSCTMP
COPYC	STA DSCPNT
	PHA             ;!! TEST ONLY
	LDA FORTYP      ;!!
	CMP #$FF        ;!! LOOK FOR -1
	BEQ *+5         ;!!
	JSR ERRORZ      ;!!
	PLA             ;!!
	STY DSCPNT+1
	STA INDEX       ;INDEX POINTS TO NEW
	STY INDEX+1     ;DESCRIPTOR
	JSR FRETMS
;
; FIX THE STRINGS BY FLAGGING THE
;OLD STRING AS GARBAGE AND THE NEW
;STRING BY POINTING IT TO ITS
;NEW DESCRIPTOR
;
	JSR STRADJ      ;SET UP NEW STRING
	BCC COPY00      ;LEAVE IT ALONE
	LDY #$00
	LDA FORPNT      ;PUT IN BACKWARDS LINK
	STA (INDEX),Y
	INY
	LDA FORPNT+1
	STA (INDEX),Y
;
COPY00	LDA FORPNT      ;FIX OLD STRING
	STA INDEX
	LDA FORPNT+1
	STA INDEX+1
	JSR STRADJ      ;POINT TO OLD STRING
	BCC COPY01      ;IN TEXT DO NOT FIX
	DEY             ;RESTORE Y
	LDA #$FF        ;GARBAGE FLAG
	STA (INDEX),Y
	DEY
	TXA
	STA (INDEX),Y   ;STORE LENGTH
;
COPY01	LDY #$02
COPY02	LDA (DSCPNT),Y  ;SET THE DESCRIPTOR
	STA (FORPNT),Y
	DEY
	BPL COPY02
	RTS
.SKI 5
;
;SUBROUTINE STRADJ TAKES THE POINTER
;INDEX WHICH POINTS TO A DESCRIPTOR
;AND INDEXES TO THE DESCIPTORS 
;STRING DATA.
; IF THE STRING IS BELOW FRETOP
; (NO ACTION TO TAKE) WE RETURN
;WITH THE CARRY CLEAR.
; ELSE WE RETURN WITH THE POINTER
;SET TO THE LINK BYTES IN THE STRING
;THE LENGTH IN ACC AND THE CARRY SET
;
STRADJ	LDY #$00
	LDA (INDEX),Y   ;PUSH LENGTH ON STACK
	PHA
	BEQ ADJ01       ;LENGTH 0 DO NOTHING
	INY
	LDA (INDEX),Y   ;LO BYTE TO X
	TAX
	INY
	LDA (INDEX)Y    ;HI BYTE IN A
	BMI ADJ01       ;PREVENTS WRITING ABOVE $8000
	CMP #>ROMLOC
	BCS ADJ01
	CMP FRETOP+1    ;IF BELOW FRETOP
	BCC ADJ01       ;THEN RETURN TO CALLER
	BNE ADJ
	CPX FRETOP
	BCC ADJ01
ADJ	CMP DSDESC+2
	BNE ADJ02       ;FIX
	CPX DSDESC+1
	BEQ ADJ01
ADJ02	STX INDEX       ;OK: SET POINTER
	STA INDEX+1
	PLA             ;GET BACK LENGTH
	TAX             ;INTO X ALSO
	CLC
	ADC INDEX
	STA INDEX
	BCC ADJ00
	INC INDEX+1
ADJ00	SEC             ;CARRY SET
	RTS
ADJ01	PLA             ;CLEAN UP STACK
	CLC
	RTS
.SKI 5
PRINTN	JSR CHRGET      ;DUMP #
	JSR CMDER
	JMP IODONE
CMD	CMP #'#
	BEQ CMDA
	JMP SNERR
CMDA	JSR CHRGET      ;DUMP THE #
CMDER	JSR GETBYT
	BEQ SAVEIT
	LDA #44
	JSR SYNCHR
SAVEIT	PHP
	JSR CKOUT
	STX CHANNL
	PLP
	JMP PRINT
STRDON	JSR STRPRT
NEWCHR	JSR CHRGOT
PRINT	BEQ CRDO
	CMP #'#         ;CHK FOR IEEE
	BEQ PRINTN      ;YES IEEE
	CMP #USINTK     ;CHK FOR USING TOKEN
	BNE PRINTC
	JMP USGHDL      ;YES GOTO USING HANDLER
PRINTC	BEQ PRTRTS
	CMP #TABTK
	BEQ TABER
	CMP #SPCTK
	CLC
	BEQ TABER
	CMP #44
	BEQ COMPRT
	CMP #59
	BEQ NOTABR
	JSR FRMEVL
	BIT VALTYP
	BMI STRDON
	JSR FOUT
	JSR STROUT
	JSR OUTSPC
	BNE NEWCHR
FININL	LDA #0
	STA BUF,X
ZZ5=BUF-1
	LDX #<ZZ5
	LDY #>ZZ5
	LDA CHANNL
	BNE PRTRTS
CRDO	LDA #13
	JSR OUTDO
	LDA CHANNL
	BPL CRFIN       ;CR ONLY
	LDA #$0A        ;LINE FEED
	JSR OUTDO
CRFIN	EOR #255
PRTRTS	RTS
COMPRT	LDA TRMPOS
NCMPOS	=@36
	SEC
MORCO1	SBC #CLMWID
	BCS MORCO1
	EOR #255
	ADC #1
	BNE ASPAC
TABER	PHP
	JSR GTBYTC
	CMP #41
	BEQ *+5
	JMP SNERR
	PLP
	BCC XSPAC
	TXA
	SBC TRMPOS
	BCC NOTABR
ASPAC	TAX
XSPAC	INX
XSPAC2	DEX
	BNE XSPAC1
NOTABR	JSR CHRGET
	JMP PRINTC
.SKI 5
CHRGET	INC TXTPTR
	BNE CHRGOT
	INC TXTPTR+1
CHRGOT	STY CHRYTP      ;SAVE .Y
	LDY #0          ; CLR .Y
	LDA (TXTPTR)Y   ;GET CHAR
	LDY CHRYTP      ;RESTORE .Y
	CMP #':
	BCS CHDRTS
QNUM	CMP #$20
	BEQ CHRGET
	SEC
	SBC #'0
	SEC
	SBC #$D0
CHDRTS	RTS
.END
